{"ast":null,"code":"var _jsxFileName = \"/Users/Rober/dev/work/x_keeper/new_device_inspector/device_inspector_frontend/src/components/datamatrixGridCard.tsx\",\n  _s = $RefreshSig$();\nimport { Card, Col, Row, Spin } from 'antd';\nimport React from 'react';\n// eslint-disable-next-line @stylistic/max-len\nimport useBoardsGet from '../features/inspectionsHistory/hooks/useBoardHandler';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const DataMatrixGridCard = ({\n  multiboardId,\n  highlightedDatamatrix\n}) => {\n  _s();\n  const {\n    boards,\n    boardsStatus,\n    boardsEditDMs\n  } = useBoardsGet(multiboardId);\n  if (boardsStatus !== 'success') return /*#__PURE__*/_jsxDEV(Spin, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 42\n  }, this);\n  const datamatrixes = boards.map(board => board.datamatrix);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      title: \"Datamatrix-\\u043A\\u043E\\u0434\\u044B \\u043F\\u043B\\u0430\\u0442\",\n      children: [\"Datamatrix\", /*#__PURE__*/_jsxDEV(Row, {\n        gutter: [8, 8],\n        children: datamatrixes.map((element, index) => index < datamatrixes.length / 2 ? /*#__PURE__*/_jsxDEV(Col, {\n          className: \"gutter-row\",\n          style: highlightedDatamatrix !== null && highlightedDatamatrix !== void 0 && highlightedDatamatrix.filter(val => val == element.toString()).length ? {\n            color: 'red'\n          } : {},\n          children: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [index + 1, \".\", element]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 19\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        gutter: [8, 8],\n        children: datamatrixes.map((element, index) => index >= datamatrixes.length / 2 ? /*#__PURE__*/_jsxDEV(Col, {\n          className: \"gutter-row\",\n          style: highlightedDatamatrix !== null && highlightedDatamatrix !== void 0 && highlightedDatamatrix.filter(val => val == element.toString()).length ? {\n            color: 'red'\n          } : {},\n          children: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [index + 1, \".\", element]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 19\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(DataMatrixGridCard, \"woq+5A5kCorsm6mJdSaqHl1IYPg=\", false, function () {\n  return [useBoardsGet];\n});\n_c = DataMatrixGridCard;\nvar _c;\n$RefreshReg$(_c, \"DataMatrixGridCard\");","map":{"version":3,"names":["Card","Col","Row","Spin","React","useBoardsGet","jsxDEV","_jsxDEV","Fragment","_Fragment","DataMatrixGridCard","multiboardId","highlightedDatamatrix","_s","boards","boardsStatus","boardsEditDMs","fileName","_jsxFileName","lineNumber","columnNumber","datamatrixes","map","board","datamatrix","children","title","gutter","element","index","length","className","style","filter","val","toString","color","_c","$RefreshReg$"],"sources":["/Users/Rober/dev/work/x_keeper/new_device_inspector/device_inspector_frontend/src/components/datamatrixGridCard.tsx"],"sourcesContent":["import { Card, Col, Form, FormProps, Row, Spin } from 'antd'\nimport React from 'react'\n// eslint-disable-next-line @stylistic/max-len\nimport useBoardsGet from '../features/inspectionsHistory/hooks/useBoardHandler'\n\ntype DataMatrixProps = {\n  multiboardId: number\n  highlightedDatamatrix?: string[]\n}\n\ntype TFormValues = {\n  [key: string]: string\n}\n\nexport const DataMatrixGridCard: React.FC<DataMatrixProps> = (\n  {multiboardId, highlightedDatamatrix}\n) => {\n  const {\n    boards,\n    boardsStatus,\n    boardsEditDMs,\n  } = useBoardsGet(multiboardId)\n\n  if (boardsStatus !== 'success') return <Spin/>\n  const datamatrixes = boards!.map(board => board.datamatrix)\n\n\n  return(\n    <>\n      <Card \n        title='Datamatrix-коды плат'>\n        Datamatrix\n        <Row gutter={[8, 8]}>\n          {\n            datamatrixes.map((element: string, index: number) => \n              index < datamatrixes.length / 2\n                ? <Col className='gutter-row' style={\n                  highlightedDatamatrix?.filter(\n                    val => val == element.toString()\n                  ).length\n                    ? {\n                      color: 'red'\n                    }\n                    : {}\n                }><>{index + 1}.{element}</>\n                </Col>\n                : <></>\n            )\n          }\n        </Row>\n        <Row gutter={[8,8]}>\n          {\n            datamatrixes.map((element: string, index: number) => \n              index >= datamatrixes.length / 2\n                ? <Col className='gutter-row' style={\n                  highlightedDatamatrix?.filter(\n                    val => val == element.toString()\n                  ).length\n                    ? {\n                      color: 'red'\n                    }\n                    : {}\n                }><>{index + 1}.{element}</>\n                </Col>\n                : <></>\n            )\n          }\n        </Row>\n      </Card>\n    </>\n  )\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}