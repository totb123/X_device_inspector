{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery } from 'react-query';\nimport { getInspections, getInspectionsTotal } from '../../../services/inspectionService';\nimport { queryClient } from '../../../App';\nfunction generateQuery(filters, offset, limit) {\n  let target = new URLSearchParams();\n  if (offset != null) target.append('skip', ((offset - 1) * 10).toString());\n  if (limit != null) target.append('limit', limit.toString());\n  if (filters.sectorIds.length) {\n    filters.sectorIds.forEach(sector => target.append('sector_ids', sector.toString()));\n  }\n  return target;\n}\nexport default function useInspectionsHistoryGet(filters, offset, limit) {\n  _s();\n  const total = useQuery({\n    queryKey: ['inspectionsTotal'],\n    queryFn: async () => await getInspectionsTotal(generateQuery(filters))\n  });\n  const {\n    data,\n    status,\n    refetch\n  } = useQuery({\n    queryKey: ['inspectionsHistory'],\n    queryFn: async () => await getInspections(generateQuery(filters, offset, limit)),\n    initialData: () => {\n      return queryClient.getQueryData('inspectionsHistory');\n    }\n  });\n  return {\n    inspectionsData: data,\n    inspectionsStatus: status,\n    inspectionsRefetch: refetch,\n    inspectionsTotal: total\n  };\n}\n_s(useInspectionsHistoryGet, \"37H9VqpEeid8Ow1xctpKVwRaAwY=\", false, function () {\n  return [useQuery, useQuery];\n});","map":{"version":3,"names":["useQuery","getInspections","getInspectionsTotal","queryClient","generateQuery","filters","offset","limit","target","URLSearchParams","append","toString","sectorIds","length","forEach","sector","useInspectionsHistoryGet","_s","total","queryKey","queryFn","data","status","refetch","initialData","getQueryData","inspectionsData","inspectionsStatus","inspectionsRefetch","inspectionsTotal"],"sources":["/Users/Rober/dev/work/x_keeper/new_device_inspector/device_inspector_frontend/src/features/inspectionsHistory/hooks/useInspectionGet.ts"],"sourcesContent":["import {useQuery} from 'react-query'\nimport {\n  getInspections,\n  getInspectionsTotal\n} from '../../../services/inspectionService'\nimport {queryClient} from '../../../App'\nimport {TInspection} from '../../../types/inspectionType'\nimport { \n  HistoryFilterContextType \n} from '../types/historyFilterContextType'\n\n\n\nfunction generateQuery(filters: HistoryFilterContextType, \n  offset?: number, \n  limit?: number\n): URLSearchParams {    \n  let target = new URLSearchParams()\n  if (offset != null)\n    target.append('skip', ((offset-1) * 10).toString())\n  if (limit != null)\n    target.append('limit', limit.toString())\n  \n  if (filters.sectorIds.length) {\n    filters.sectorIds.forEach(\n      sector => target.append('sector_ids', sector.toString())\n    )\n  }\n  return target\n}\n\n\nexport default function useInspectionsHistoryGet(\n  filters: HistoryFilterContextType, \n  offset: number, \n  limit: number\n) {\n\n  const total = useQuery<number>({queryKey: ['inspectionsTotal'], \n    queryFn: async () => await getInspectionsTotal(generateQuery(filters))\n  })\n\n  const {\n    data,\n    status,\n    refetch\n  } = useQuery<TInspection[], string>(\n    {\n      queryKey: ['inspectionsHistory'],\n      queryFn: async ()  => await getInspections(\n        generateQuery(filters, offset, limit)), initialData: () => {\n        return queryClient.getQueryData('inspectionsHistory')\n      }\n    })\n\n\n  return {\n    inspectionsData: data, \n    inspectionsStatus: status, \n    inspectionsRefetch: refetch, \n    inspectionsTotal: total\n  }\n}"],"mappings":";AAAA,SAAQA,QAAQ,QAAO,aAAa;AACpC,SACEC,cAAc,EACdC,mBAAmB,QACd,qCAAqC;AAC5C,SAAQC,WAAW,QAAO,cAAc;AAQxC,SAASC,aAAaA,CAACC,OAAiC,EACtDC,MAAe,EACfC,KAAc,EACG;EACjB,IAAIC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;EAClC,IAAIH,MAAM,IAAI,IAAI,EAChBE,MAAM,CAACE,MAAM,CAAC,MAAM,EAAE,CAAC,CAACJ,MAAM,GAAC,CAAC,IAAI,EAAE,EAAEK,QAAQ,CAAC,CAAC,CAAC;EACrD,IAAIJ,KAAK,IAAI,IAAI,EACfC,MAAM,CAACE,MAAM,CAAC,OAAO,EAAEH,KAAK,CAACI,QAAQ,CAAC,CAAC,CAAC;EAE1C,IAAIN,OAAO,CAACO,SAAS,CAACC,MAAM,EAAE;IAC5BR,OAAO,CAACO,SAAS,CAACE,OAAO,CACvBC,MAAM,IAAIP,MAAM,CAACE,MAAM,CAAC,YAAY,EAAEK,MAAM,CAACJ,QAAQ,CAAC,CAAC,CACzD,CAAC;EACH;EACA,OAAOH,MAAM;AACf;AAGA,eAAe,SAASQ,wBAAwBA,CAC9CX,OAAiC,EACjCC,MAAc,EACdC,KAAa,EACb;EAAAU,EAAA;EAEA,MAAMC,KAAK,GAAGlB,QAAQ,CAAS;IAACmB,QAAQ,EAAE,CAAC,kBAAkB,CAAC;IAC5DC,OAAO,EAAE,MAAAA,CAAA,KAAY,MAAMlB,mBAAmB,CAACE,aAAa,CAACC,OAAO,CAAC;EACvE,CAAC,CAAC;EAEF,MAAM;IACJgB,IAAI;IACJC,MAAM;IACNC;EACF,CAAC,GAAGvB,QAAQ,CACV;IACEmB,QAAQ,EAAE,CAAC,oBAAoB,CAAC;IAChCC,OAAO,EAAE,MAAAA,CAAA,KAAa,MAAMnB,cAAc,CACxCG,aAAa,CAACC,OAAO,EAAEC,MAAM,EAAEC,KAAK,CAAC,CAAC;IAAEiB,WAAW,EAAEA,CAAA,KAAM;MAC3D,OAAOrB,WAAW,CAACsB,YAAY,CAAC,oBAAoB,CAAC;IACvD;EACF,CAAC,CAAC;EAGJ,OAAO;IACLC,eAAe,EAAEL,IAAI;IACrBM,iBAAiB,EAAEL,MAAM;IACzBM,kBAAkB,EAAEL,OAAO;IAC3BM,gBAAgB,EAAEX;EACpB,CAAC;AACH;AAACD,EAAA,CA9BuBD,wBAAwB;EAAA,QAMhChB,QAAQ,EAQlBA,QAAQ;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}