{"ast":null,"code":"var _jsxFileName = \"/Users/Rober/dev/work/x_keeper/new_device_inspector/device_inspector_frontend/device_inspector_frontend/src/components/datamatrixGridModal.tsx\",\n  _s = $RefreshSig$();\nimport { Button, Card, Col, Form, Input, Row, Spin } from 'antd';\nimport React from 'react';\n// eslint-disable-next-line @stylistic/max-len\nimport useBoardsGet from '../features/inspectionsHistory/hooks/useBoardHandler';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const DataMatrixGridModal = ({\n  multiboardId,\n  highlightedDatamatrix\n}) => {\n  _s();\n  const {\n    boards,\n    boardsStatus,\n    boardsEditDMs\n  } = useBoardsGet(multiboardId);\n  if (boardsStatus !== 'success') return /*#__PURE__*/_jsxDEV(Spin, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 42\n  }, this);\n  const datamatrixes = boards.map(board => board.datamatrix);\n  const side = boards.find(board => board.side).side;\n  const onFinish = formValues => {\n    if (formValues && boards) {\n      const boardIds = Object.keys(formValues).filter(key => formValues[key]).map(index => Number(index));\n      const dms = Object.values(formValues).filter(value => value);\n      boardsEditDMs({\n        board_ids: boardIds,\n        dms: dms\n      });\n    }\n  };\n  const inputRender = (index, board) => {\n    return /*#__PURE__*/_jsxDEV(Form.Item, {\n      label: index + 1,\n      name: board.id,\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        defaultValue: board.datamatrix\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      onFinish: onFinish,\n      autoComplete: \"off\",\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        type: 'inner',\n        title: \"Datamatrix-\\u043A\\u043E\\u0434\\u044B \\u043F\\u043B\\u0430\\u0442\",\n        children: [\"Datamatrix\", /*#__PURE__*/_jsxDEV(Row, {\n          gutter: [8, 8],\n          children: boards.map((board, index) => index < datamatrixes.length / 2 ? /*#__PURE__*/_jsxDEV(Col, {\n            className: \"gutter-row\",\n            style: highlightedDatamatrix !== null && highlightedDatamatrix !== void 0 && highlightedDatamatrix.filter(val => val == board.datamatrix.toString()).length ? {\n              color: 'red'\n            } : {},\n            children: inputRender(index, board)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 21\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          gutter: [8, 8],\n          children: boards.map((board, index) => index >= datamatrixes.length / 2 ? /*#__PURE__*/_jsxDEV(Col, {\n            className: \"gutter-row\",\n            style: highlightedDatamatrix !== null && highlightedDatamatrix !== void 0 && highlightedDatamatrix.filter(val => val == board.datamatrix.toString()).length ? {\n              color: 'red'\n            } : {},\n            children: inputRender(index, board)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 21\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        children: \"\\u0418\\u0437\\u043C\\u0435\\u043D\\u0438\\u0442\\u044C \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u044F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(DataMatrixGridModal, \"woq+5A5kCorsm6mJdSaqHl1IYPg=\", false, function () {\n  return [useBoardsGet];\n});\n_c = DataMatrixGridModal;\nvar _c;\n$RefreshReg$(_c, \"DataMatrixGridModal\");","map":{"version":3,"names":["Button","Card","Col","Form","Input","Row","Spin","React","useBoardsGet","jsxDEV","_jsxDEV","Fragment","_Fragment","DataMatrixGridModal","multiboardId","highlightedDatamatrix","_s","boards","boardsStatus","boardsEditDMs","fileName","_jsxFileName","lineNumber","columnNumber","datamatrixes","map","board","datamatrix","side","find","onFinish","formValues","boardIds","Object","keys","filter","key","index","Number","dms","values","value","board_ids","inputRender","Item","label","name","id","children","defaultValue","autoComplete","type","title","gutter","length","className","style","val","toString","color","htmlType","_c","$RefreshReg$"],"sources":["/Users/Rober/dev/work/x_keeper/new_device_inspector/device_inspector_frontend/device_inspector_frontend/src/components/datamatrixGridModal.tsx"],"sourcesContent":["import { Button, Card, Col, Form, FormProps, Input, Row, Spin } from 'antd'\nimport React, { useEffect } from 'react'\n// eslint-disable-next-line @stylistic/max-len\nimport useBoardsGet from '../features/inspectionsHistory/hooks/useBoardHandler'\nimport { TBoard } from '../types/boardType'\n\ntype DataMatrixProps = {\n  multiboardId: number\n  highlightedDatamatrix?: string[]\n}\n\ntype TFormValues = {\n  [key: string]: string\n}\n\nexport const DataMatrixGridModal: React.FC<DataMatrixProps> = (\n  {multiboardId, highlightedDatamatrix}\n) => {\n  const {\n    boards,\n    boardsStatus,\n    boardsEditDMs,\n  } = useBoardsGet(multiboardId)\n\n  if (boardsStatus !== 'success') return <Spin/>\n  const datamatrixes = boards!.map(board => board.datamatrix)\n  const side = boards!.find(board => board.side)!.side\n\n  const onFinish: FormProps['onFinish'] = (formValues: TFormValues) => {\n    if (formValues && boards) {\n      const boardIds = Object.keys(formValues)\n        .filter((key: string) => formValues[key])\n        .map((index: string) => Number(index))\n      const dms = Object.values(formValues)\n        .filter((value: string) => value)\n      boardsEditDMs({\n        board_ids: boardIds,\n        dms: dms\n      })\n    }\n  }\n\n  const inputRender = (index: number, board: TBoard) => {\n    return (\n      <Form.Item\n        label={index + 1}\n        name={board.id}\n      >\n        <Input defaultValue={board.datamatrix}/>\n      </Form.Item>)\n  }\n\n\n  return(\n    <>\n      <Form\n        onFinish={onFinish}\n        autoComplete=\"off\"\n      >\n        <Card \n          type={'inner'}\n          title='Datamatrix-коды плат'>\n          Datamatrix\n          <Row gutter={[8, 8]}>\n            {\n              boards!.map((board: TBoard, index: number) => \n                index < datamatrixes.length / 2\n                  ? <Col className='gutter-row' style={\n                    highlightedDatamatrix?.filter(\n                      val => val == board.datamatrix.toString()\n                    ).length\n                      ? {\n                        color: 'red'\n                      }\n                      : {}\n                  }>\n                    {inputRender(index, board)}\n                  </Col>\n                  : <></>\n              )\n            }\n          </Row>\n          <Row gutter={[8,8]}>\n            {\n              boards!.map((board: TBoard, index: number) =>\n                index >= datamatrixes.length / 2\n                  ? <Col className='gutter-row'style={\n                    highlightedDatamatrix?.filter(\n                      val => val == board.datamatrix.toString()\n                    ).length\n                      ? {\n                        color: 'red'\n                      }\n                      : {}\n                  }>\n                    {inputRender(index, board)}\n                  </Col>\n                  : <></>\n              )\n            }\n          </Row>\n        </Card><Button type=\"primary\" htmlType=\"submit\">\n              Изменить значения\n        </Button>\n      </Form>\n    </>\n  )\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}