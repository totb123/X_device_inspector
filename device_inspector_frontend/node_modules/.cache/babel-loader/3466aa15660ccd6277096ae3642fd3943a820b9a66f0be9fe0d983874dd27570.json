{"ast":null,"code":"var _jsxFileName = \"/Users/Rober/dev/work/x_keeper/new_device_inspector/device_inspector_frontend/src/features/latestInspectionImage/context/latestInspectionImageContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from 'react';\nimport { defaultImageContext } from '../types/latestInspectionImageContextType';\nimport { useLastImageGet } from '../hooks/useLastImageGet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ImageContext = /*#__PURE__*/React.createContext(defaultImageContext);\nexport function useImage() {\n  _s();\n  return useContext(ImageContext);\n}\n_s(useImage, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const LatestInspectionImageContextProvider = ({\n  children\n}) => {\n  _s2();\n  const updateSector = updatedSector => {\n    if (updatedSector === undefined) {\n      setSector(undefined);\n      return;\n    }\n    setSector(updatedSector);\n  };\n  const [image, setImage] = useState({\n    ...defaultImageContext,\n    updateSector: updateSector\n  });\n  const [sector, setSector] = useState();\n  const {\n    lastImageString,\n    updateSectorId,\n    lastImageStatus,\n    lastImageUpdatedAt\n  } = useLastImageGet(4000);\n  useEffect(() => {\n    console.log(sector);\n    if (sector === undefined) setImage(defaultImageContext);else updateSectorId(sector.id);\n  }, [sector, setImage]);\n  useEffect(() => {\n    if (lastImageStatus === 'success') {\n      setImage({\n        latestImage: lastImageString,\n        selectedSector: sector,\n        updateSector: updateSector\n      });\n    }\n  }, [lastImageStatus, lastImageString]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ImageContext.Provider, {\n      value: image,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s2(LatestInspectionImageContextProvider, \"kIu5Zdzz7nOBGPj8J+dKQzuogOY=\", false, function () {\n  return [useLastImageGet];\n});\n_c = LatestInspectionImageContextProvider;\nvar _c;\n$RefreshReg$(_c, \"LatestInspectionImageContextProvider\");","map":{"version":3,"names":["React","useContext","useEffect","useState","defaultImageContext","useLastImageGet","jsxDEV","_jsxDEV","Fragment","_Fragment","ImageContext","createContext","useImage","_s","LatestInspectionImageContextProvider","children","_s2","updateSector","updatedSector","undefined","setSector","image","setImage","sector","lastImageString","updateSectorId","lastImageStatus","lastImageUpdatedAt","console","log","id","latestImage","selectedSector","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/Rober/dev/work/x_keeper/new_device_inspector/device_inspector_frontend/src/features/latestInspectionImage/context/latestInspectionImageContext.tsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport {\n  ImageContextType as ContextType, \n  defaultImageContext\n} from '../types/latestInspectionImageContextType'\nimport { useLastImageGet } from '../hooks/useLastImageGet'\nimport { TSector } from '../../../types/sectorType'\ntype ImageContextProps = {\n  children: React.ReactNode\n}\n\nconst ImageContext =\n React.createContext<ContextType>(defaultImageContext)\n\nexport function useImage()  {\n  return useContext(ImageContext)\n}\nexport const LatestInspectionImageContextProvider: \nReact.FC<ImageContextProps> = (\n  {children}\n) => {\n  const updateSector = (updatedSector: TSector | undefined) => {\n    if (updatedSector === undefined) {\n      setSector(undefined)\n      return\n    }\n    setSector(updatedSector)\n  }\n  const [image, setImage] = useState(\n    {...defaultImageContext,updateSector: updateSector}\n  )\n\n  const [sector, setSector] = useState<TSector>()\n  const {\n    lastImageString, \n    updateSectorId, \n    lastImageStatus, \n    lastImageUpdatedAt\n  } =  useLastImageGet(4000) \n\n  \n\n  useEffect(() => {\n    console.log(sector)\n    if(sector === undefined) setImage(defaultImageContext)\n    else updateSectorId(sector.id)\n  }, [sector, setImage])\n\n  useEffect(() => {\n    if (lastImageStatus === 'success'){\n      setImage({\n        latestImage: lastImageString,\n        selectedSector: sector,\n        updateSector: updateSector\n      })\n    }\n  },[lastImageStatus, lastImageString])\n\n  return (\n    <>\n      <ImageContext.Provider value={image}>\n        {children}\n      </ImageContext.Provider>\n    </>\n  )\n}"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC9D,SAEEC,mBAAmB,QACd,2CAA2C;AAClD,SAASC,eAAe,QAAQ,0BAA0B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAM1D,MAAMC,YAAY,gBACjBV,KAAK,CAACW,aAAa,CAAcP,mBAAmB,CAAC;AAEtD,OAAO,SAASQ,QAAQA,CAAA,EAAI;EAAAC,EAAA;EAC1B,OAAOZ,UAAU,CAACS,YAAY,CAAC;AACjC;AAACG,EAAA,CAFeD,QAAQ;AAGxB,OAAO,MAAME,oCACc,GAAGA,CAC5B;EAACC;AAAQ,CAAC,KACP;EAAAC,GAAA;EACH,MAAMC,YAAY,GAAIC,aAAkC,IAAK;IAC3D,IAAIA,aAAa,KAAKC,SAAS,EAAE;MAC/BC,SAAS,CAACD,SAAS,CAAC;MACpB;IACF;IACAC,SAAS,CAACF,aAAa,CAAC;EAC1B,CAAC;EACD,MAAM,CAACG,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAChC;IAAC,GAAGC,mBAAmB;IAACa,YAAY,EAAEA;EAAY,CACpD,CAAC;EAED,MAAM,CAACM,MAAM,EAAEH,SAAS,CAAC,GAAGjB,QAAQ,CAAU,CAAC;EAC/C,MAAM;IACJqB,eAAe;IACfC,cAAc;IACdC,eAAe;IACfC;EACF,CAAC,GAAItB,eAAe,CAAC,IAAI,CAAC;EAI1BH,SAAS,CAAC,MAAM;IACd0B,OAAO,CAACC,GAAG,CAACN,MAAM,CAAC;IACnB,IAAGA,MAAM,KAAKJ,SAAS,EAAEG,QAAQ,CAAClB,mBAAmB,CAAC,MACjDqB,cAAc,CAACF,MAAM,CAACO,EAAE,CAAC;EAChC,CAAC,EAAE,CAACP,MAAM,EAAED,QAAQ,CAAC,CAAC;EAEtBpB,SAAS,CAAC,MAAM;IACd,IAAIwB,eAAe,KAAK,SAAS,EAAC;MAChCJ,QAAQ,CAAC;QACPS,WAAW,EAAEP,eAAe;QAC5BQ,cAAc,EAAET,MAAM;QACtBN,YAAY,EAAEA;MAChB,CAAC,CAAC;IACJ;EACF,CAAC,EAAC,CAACS,eAAe,EAAEF,eAAe,CAAC,CAAC;EAErC,oBACEjB,OAAA,CAAAE,SAAA;IAAAM,QAAA,eACER,OAAA,CAACG,YAAY,CAACuB,QAAQ;MAACC,KAAK,EAAEb,KAAM;MAAAN,QAAA,EACjCA;IAAQ;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACY;EAAC,gBACxB,CAAC;AAEP,CAAC;AAAAtB,GAAA,CAhDYF,oCACc;EAAA,QAoBpBT,eAAe;AAAA;AAAAkC,EAAA,GArBTzB,oCACc;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}