{"ast":null,"code":"var _jsxFileName = \"/Users/Rober/dev/work/x_keeper/new_device_inspector/device_inspector_frontend/src/features/latestInspectionImage/context/latestInspectionImageContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from 'react';\nimport { defaultImageContext } from '../types/latestInspectionImageContextType';\nimport { useLastImageGet } from '../hooks/useLastImageGet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ImageContext = /*#__PURE__*/React.createContext(defaultImageContext);\nexport function useImage() {\n  _s();\n  return useContext(ImageContext);\n}\n_s(useImage, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const LatestInspectionImageContextProvider = ({\n  children\n}) => {\n  _s2();\n  const updateSector = updatedSector => {\n    console.log('updateSector', updatedSector);\n    updateSectorId(updatedSector);\n  };\n  const {\n    lastImage,\n    lastImageStatus,\n    updateSectorId,\n    selectedSector\n  } = useLastImageGet(4000);\n  const [image, setImage] = useState({\n    ...defaultImageContext,\n    updateSector: updateSector\n  });\n  useEffect(() => {\n    if (lastImageStatus === 'success') {\n      setImage({\n        ...image,\n        latestImage: lastImage === null || lastImage === void 0 ? void 0 : lastImage.latestImage,\n        selectedSector: selectedSector,\n        latestImageCreatedAt: lastImage === null || lastImage === void 0 ? void 0 : lastImage.latestImageCreatedAt\n      });\n    }\n  }, [lastImageStatus, selectedSector]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ImageContext.Provider, {\n      value: image,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s2(LatestInspectionImageContextProvider, \"q1/a3Ni1/rVmg5Cxpyjphc35YCU=\", false, function () {\n  return [useLastImageGet];\n});\n_c = LatestInspectionImageContextProvider;\nvar _c;\n$RefreshReg$(_c, \"LatestInspectionImageContextProvider\");","map":{"version":3,"names":["React","useContext","useEffect","useState","defaultImageContext","useLastImageGet","jsxDEV","_jsxDEV","Fragment","_Fragment","ImageContext","createContext","useImage","_s","LatestInspectionImageContextProvider","children","_s2","updateSector","updatedSector","console","log","updateSectorId","lastImage","lastImageStatus","selectedSector","image","setImage","latestImage","latestImageCreatedAt","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/Rober/dev/work/x_keeper/new_device_inspector/device_inspector_frontend/src/features/latestInspectionImage/context/latestInspectionImageContext.tsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport {\n  ImageContextType as ContextType, \n  defaultImageContext\n} from '../types/latestInspectionImageContextType'\nimport { useLastImageGet } from '../hooks/useLastImageGet'\nimport { useFullScreen } from '../../../hooks/useFullscreen'\ntype ImageContextProps = {\n  children: React.ReactNode\n}\n\nconst ImageContext =\n React.createContext<ContextType>(defaultImageContext)\n\nexport function useImage()  {\n  return useContext(ImageContext)\n}\nexport const LatestInspectionImageContextProvider: \nReact.FC<ImageContextProps> = (\n  {children}\n) => {\n  const updateSector = (updatedSector: number | undefined) => {\n    console.log('updateSector', updatedSector)\n    updateSectorId(updatedSector)\n  }\n  const {\n    lastImage, \n    lastImageStatus, \n    updateSectorId, \n    selectedSector\n  } =  useLastImageGet(4000) \n\n  const [image, setImage] = useState(\n    {...defaultImageContext,updateSector: updateSector}\n  )\n\n  useEffect(() => {\n    if(lastImageStatus === 'success'){ \n      setImage({\n        ...image,\n        latestImage: lastImage?.latestImage,\n        selectedSector: selectedSector,\n        latestImageCreatedAt: lastImage?.latestImageCreatedAt\n      })\n    }\n  }, [lastImageStatus, selectedSector])\n\n  return (\n    <>\n      <ImageContext.Provider value={image}>\n        {children}\n      </ImageContext.Provider>\n    </>\n  )\n}\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC9D,SAEEC,mBAAmB,QACd,2CAA2C;AAClD,SAASC,eAAe,QAAQ,0BAA0B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAM1D,MAAMC,YAAY,gBACjBV,KAAK,CAACW,aAAa,CAAcP,mBAAmB,CAAC;AAEtD,OAAO,SAASQ,QAAQA,CAAA,EAAI;EAAAC,EAAA;EAC1B,OAAOZ,UAAU,CAACS,YAAY,CAAC;AACjC;AAACG,EAAA,CAFeD,QAAQ;AAGxB,OAAO,MAAME,oCACc,GAAGA,CAC5B;EAACC;AAAQ,CAAC,KACP;EAAAC,GAAA;EACH,MAAMC,YAAY,GAAIC,aAAiC,IAAK;IAC1DC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,aAAa,CAAC;IAC1CG,cAAc,CAACH,aAAa,CAAC;EAC/B,CAAC;EACD,MAAM;IACJI,SAAS;IACTC,eAAe;IACfF,cAAc;IACdG;EACF,CAAC,GAAInB,eAAe,CAAC,IAAI,CAAC;EAE1B,MAAM,CAACoB,KAAK,EAAEC,QAAQ,CAAC,GAAGvB,QAAQ,CAChC;IAAC,GAAGC,mBAAmB;IAACa,YAAY,EAAEA;EAAY,CACpD,CAAC;EAEDf,SAAS,CAAC,MAAM;IACd,IAAGqB,eAAe,KAAK,SAAS,EAAC;MAC/BG,QAAQ,CAAC;QACP,GAAGD,KAAK;QACRE,WAAW,EAAEL,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEK,WAAW;QACnCH,cAAc,EAAEA,cAAc;QAC9BI,oBAAoB,EAAEN,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEM;MACnC,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACL,eAAe,EAAEC,cAAc,CAAC,CAAC;EAErC,oBACEjB,OAAA,CAAAE,SAAA;IAAAM,QAAA,eACER,OAAA,CAACG,YAAY,CAACmB,QAAQ;MAACC,KAAK,EAAEL,KAAM;MAAAV,QAAA,EACjCA;IAAQ;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACY;EAAC,gBACxB,CAAC;AAEP,CAAC;AAAAlB,GAAA,CArCYF,oCACc;EAAA,QAYpBT,eAAe;AAAA;AAAA8B,EAAA,GAbTrB,oCACc;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}