{"ast":null,"code":"var _jsxFileName = \"/Users/Rober/dev/work/x_keeper/new_device_inspector/device_inspector_frontend/src/features/latestInspectionImage/components/sectorPicker.tsx\",\n  _s = $RefreshSig$();\nimport { Button, Form, Space } from 'antd';\nimport React from 'react';\nimport { useSectorGet } from '../../../hooks/useSectorGet';\nimport { useImage, useUpdateImage } from '../context/latestInspectionImageContext';\nimport { SectorInput } from '../../../components/sectorInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SectorPicker = () => {\n  _s();\n  const {\n    sectors,\n    sectorsStatus\n  } = useSectorGet();\n  const updateImageData = useUpdateImage();\n  const imageData = useImage();\n  const handleDataInput = updates => {\n    updateImageData({\n      ...imageData,\n      ...updates\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Form, {\n    children: /*#__PURE__*/_jsxDEV(Space, {\n      direction: \"vertical\",\n      children: [/*#__PURE__*/_jsxDEV(SectorInput, {\n        isMultiple: false,\n        allowClear: false,\n        onChange: selectedSector => handleDataInput({\n          selectedSector: selectedSector\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        disabled: sectorsStatus !== 'success',\n        children: \"\\u041F\\u043E\\u0434\\u0442\\u0432\\u0435\\u0440\\u0434\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 10\n  }, this);\n};\n_s(SectorPicker, \"JhyswgmgJqeqw3849TlXAVWznKM=\", false, function () {\n  return [useSectorGet, useUpdateImage, useImage];\n});\n_c = SectorPicker;\nvar _c;\n$RefreshReg$(_c, \"SectorPicker\");","map":{"version":3,"names":["Button","Form","Space","React","useSectorGet","useImage","useUpdateImage","SectorInput","jsxDEV","_jsxDEV","SectorPicker","_s","sectors","sectorsStatus","updateImageData","imageData","handleDataInput","updates","children","direction","isMultiple","allowClear","onChange","selectedSector","fileName","_jsxFileName","lineNumber","columnNumber","disabled","_c","$RefreshReg$"],"sources":["/Users/Rober/dev/work/x_keeper/new_device_inspector/device_inspector_frontend/src/features/latestInspectionImage/components/sectorPicker.tsx"],"sourcesContent":["import { Button, Form, Select, Space, Spin } from 'antd'\nimport React from 'react'\nimport { useSectorGet } from '../../../hooks/useSectorGet'\nimport mapSectorIds from '../../../utils/sectorMapper'\nimport { TSector } from '../../../types/sectorType'\nimport {\n  ImageContextType\n} from '../types/latestInspectionImageContextType'\n\nimport { \n  useImage, \n  useUpdateImage \n} from '../context/latestInspectionImageContext'\nimport { SectorInput } from '../../../components/sectorInput'\nexport const SectorPicker: React.FC = () => {\n  const {sectors, sectorsStatus} = useSectorGet()\n  \n  const updateImageData = useUpdateImage()\n  const imageData = useImage()\n\n  const handleDataInput = (\n    updates: Partial<ImageContextType>\n  ) => {\n    updateImageData({\n      ...imageData,\n      ...updates\n    })\n  }\n  return <Form>\n    <Space direction='vertical'>\n      <SectorInput\n        isMultiple={false}\n        allowClear={false}\n        onChange={\n          selectedSector => \n            handleDataInput(\n              {selectedSector: selectedSector as TSector}\n            )\n        }\n      />\n      <Button disabled={sectorsStatus !== 'success'}>\n        Подтвердить\n      </Button>\n    </Space>\n  </Form>\n}"],"mappings":";;AAAA,SAASA,MAAM,EAAEC,IAAI,EAAUC,KAAK,QAAc,MAAM;AACxD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,6BAA6B;AAO1D,SACEC,QAAQ,EACRC,cAAc,QACT,yCAAyC;AAChD,SAASC,WAAW,QAAQ,iCAAiC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAC7D,OAAO,MAAMC,YAAsB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1C,MAAM;IAACC,OAAO;IAAEC;EAAa,CAAC,GAAGT,YAAY,CAAC,CAAC;EAE/C,MAAMU,eAAe,GAAGR,cAAc,CAAC,CAAC;EACxC,MAAMS,SAAS,GAAGV,QAAQ,CAAC,CAAC;EAE5B,MAAMW,eAAe,GACnBC,OAAkC,IAC/B;IACHH,eAAe,CAAC;MACd,GAAGC,SAAS;MACZ,GAAGE;IACL,CAAC,CAAC;EACJ,CAAC;EACD,oBAAOR,OAAA,CAACR,IAAI;IAAAiB,QAAA,eACVT,OAAA,CAACP,KAAK;MAACiB,SAAS,EAAC,UAAU;MAAAD,QAAA,gBACzBT,OAAA,CAACF,WAAW;QACVa,UAAU,EAAE,KAAM;QAClBC,UAAU,EAAE,KAAM;QAClBC,QAAQ,EACNC,cAAc,IACZP,eAAe,CACb;UAACO,cAAc,EAAEA;QAAyB,CAC5C;MACH;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eACFlB,OAAA,CAACT,MAAM;QAAC4B,QAAQ,EAAEf,aAAa,KAAK,SAAU;QAAAK,QAAA,EAAC;MAE/C;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AACT,CAAC;AAAAhB,EAAA,CA/BYD,YAAsB;EAAA,QACAN,YAAY,EAErBE,cAAc,EACpBD,QAAQ;AAAA;AAAAwB,EAAA,GAJfnB,YAAsB;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}