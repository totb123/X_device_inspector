{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery } from 'react-query';\nimport { getLastImage } from '../services/getLastImage';\nimport { useEffect, useState } from 'react';\nimport { useDebounce } from '../../../hooks/useDebounce';\nexport const useLastImageGet = () => {\n  _s();\n  const debounce = useDebounce();\n  const [sectorId, setSectorId] = useState();\n  const updateSectorId = sectorId => {\n    setSectorId(sectorId);\n  };\n  const {\n    data,\n    status,\n    refetch,\n    dataUpdatedAt\n  } = useQuery({\n    queryFn: () => sectorId === undefined ? '' : getLastImage(sectorId)\n  });\n  useEffect(() => {\n    refetch();\n  }, [sectorId, refetch]);\n  useEffect(() => {\n    if (status === 'success') debounce(() => {\n      refetch();\n    }, refetchDelay);\n  }, [status, refetch]);\n  return {\n    lastImageString: data,\n    lastImageStatus: status,\n    lastImageUpdatedAt: dataUpdatedAt,\n    updateSectorId: updateSectorId\n  };\n};\n_s(useLastImageGet, \"q9Ey/QS6m49709Af0v9o/m+vwSo=\", false, function () {\n  return [useDebounce, useQuery];\n});","map":{"version":3,"names":["useQuery","getLastImage","useEffect","useState","useDebounce","useLastImageGet","_s","debounce","sectorId","setSectorId","updateSectorId","data","status","refetch","dataUpdatedAt","queryFn","undefined","refetchDelay","lastImageString","lastImageStatus","lastImageUpdatedAt"],"sources":["/Users/Rober/dev/work/x_keeper/new_device_inspector/device_inspector_frontend/src/features/latestInspectionImage/hooks/useLastImageGet.ts"],"sourcesContent":["import { useQuery } from 'react-query'\nimport { getLastImage } from '../services/getLastImage'\nimport { useEffect, useState } from 'react'\nimport { useDebounce } from '../../../hooks/useDebounce'\n\nexport const useLastImageGet = (\n) => {\n  const debounce = useDebounce()\n\n  const [sectorId, setSectorId] = useState<number>()\n\n  const updateSectorId = (sectorId: number) => {\n    setSectorId(sectorId)\n  }\n\n  const {data, status, refetch, dataUpdatedAt} = useQuery<string, string>(\n    {queryFn: () => sectorId === undefined ? '' : getLastImage(sectorId)}\n  )\n  \n  useEffect(() => {\n    refetch()\n  }, [sectorId, refetch])\n\n  useEffect(() => {\n    if (status === 'success')\n      debounce(() => {refetch()}, refetchDelay)\n  }, [status, refetch])\n  \n  return {\n    lastImageString: data, \n    lastImageStatus: status, \n    lastImageUpdatedAt: dataUpdatedAt,\n    updateSectorId: updateSectorId\n  }\n}"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,aAAa;AACtC,SAASC,YAAY,QAAQ,0BAA0B;AACvD,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,4BAA4B;AAExD,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAC1B;EAAAC,EAAA;EACH,MAAMC,QAAQ,GAAGH,WAAW,CAAC,CAAC;EAE9B,MAAM,CAACI,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAS,CAAC;EAElD,MAAMO,cAAc,GAAIF,QAAgB,IAAK;IAC3CC,WAAW,CAACD,QAAQ,CAAC;EACvB,CAAC;EAED,MAAM;IAACG,IAAI;IAAEC,MAAM;IAAEC,OAAO;IAAEC;EAAa,CAAC,GAAGd,QAAQ,CACrD;IAACe,OAAO,EAAEA,CAAA,KAAMP,QAAQ,KAAKQ,SAAS,GAAG,EAAE,GAAGf,YAAY,CAACO,QAAQ;EAAC,CACtE,CAAC;EAEDN,SAAS,CAAC,MAAM;IACdW,OAAO,CAAC,CAAC;EACX,CAAC,EAAE,CAACL,QAAQ,EAAEK,OAAO,CAAC,CAAC;EAEvBX,SAAS,CAAC,MAAM;IACd,IAAIU,MAAM,KAAK,SAAS,EACtBL,QAAQ,CAAC,MAAM;MAACM,OAAO,CAAC,CAAC;IAAA,CAAC,EAAEI,YAAY,CAAC;EAC7C,CAAC,EAAE,CAACL,MAAM,EAAEC,OAAO,CAAC,CAAC;EAErB,OAAO;IACLK,eAAe,EAAEP,IAAI;IACrBQ,eAAe,EAAEP,MAAM;IACvBQ,kBAAkB,EAAEN,aAAa;IACjCJ,cAAc,EAAEA;EAClB,CAAC;AACH,CAAC;AAAAJ,EAAA,CA7BYD,eAAe;EAAA,QAETD,WAAW,EAQmBJ,QAAQ;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}