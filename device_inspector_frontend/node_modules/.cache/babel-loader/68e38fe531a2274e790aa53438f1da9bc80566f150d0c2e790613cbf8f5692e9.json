{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useMutation, useQuery } from 'react-query';\nimport { getCoordinates, updateCoordinates } from '../services/coordinatesService';\nimport { useEffect, useRef, useState } from 'react';\nexport const useSettingsHandler = (sectorId, side, specificationId) => {\n  _s();\n  const {\n    data,\n    status,\n    refetch\n  } = useQuery(['coordinates'], {\n    queryFn: () => getCoordinates(sectorId, side, specificationId)\n  });\n  const [initialFetch, setInitialFetch] = useState(true);\n  const [settings, setSettings] = useState(undefined);\n  const prevSectorId = usePrevious(sectorId);\n  const prevSide = usePrevious(side);\n  useEffect(() => {\n    if (initialFetch || prevSectorId !== sectorId || prevSide !== side) {\n      setSettings(data);\n      setInitialFetch(false);\n    }\n  }, [data, sectorId, side, initialFetch, prevSectorId, prevSide]);\n  const mutation = useMutation(async coordinates => await updateCoordinates({\n    sectorId: sectorId,\n    side: side,\n    specificationId: sectorId,\n    coordinates: coordinates\n  }), {\n    onSuccess: () => {\n      refetch();\n    }\n  });\n  return {\n    settings: data,\n    settingsStatus: status,\n    settingsRefetch: refetch,\n    updateCoordinates: mutation.mutate,\n    updateCoordinatesStatus: mutation.status\n  };\n};\n_s(useSettingsHandler, \"ypxjhleR9FZlaW+0t6FKnaubK2c=\", false, function () {\n  return [useQuery, usePrevious, usePrevious, useMutation];\n});\nfunction usePrevious(value) {\n  _s2();\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n_s2(usePrevious, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");","map":{"version":3,"names":["useMutation","useQuery","getCoordinates","updateCoordinates","useEffect","useRef","useState","useSettingsHandler","sectorId","side","specificationId","_s","data","status","refetch","queryFn","initialFetch","setInitialFetch","settings","setSettings","undefined","prevSectorId","usePrevious","prevSide","mutation","coordinates","onSuccess","settingsStatus","settingsRefetch","mutate","updateCoordinatesStatus","value","_s2","ref","current"],"sources":["/Users/Rober/dev/work/x_keeper/new_device_inspector/device_inspector_frontend/src/features/settings/hooks/useSettingsHandler.ts"],"sourcesContent":["\nimport { useMutation, useQuery } from 'react-query'\nimport { TSettings } from '../types/settingsType'\nimport { \n  getCoordinates, \n  updateCoordinates \n} from '../services/coordinatesService'\nimport { useEffect, useRef, useState } from 'react'\n\n\nexport const useSettingsHandler = (\n  sectorId: number, \n  side: 'Top' | 'Bot',\n  specificationId: number\n) => {\n  const {\n    data, status, refetch\n  } = useQuery(['coordinates'],\n    {\n      queryFn: () => \n        getCoordinates(sectorId, side, specificationId)\n    }\n  )\n  const [initialFetch, setInitialFetch] = useState(true)\n  const [\n    settings, setSettings\n  ] = useState<TSettings | undefined>(undefined)\n  \n  const prevSectorId = usePrevious(sectorId)\n  const prevSide = usePrevious(side)\n  \n  useEffect(() => {\n    if (initialFetch || prevSectorId!== sectorId || prevSide!== side) {\n      setSettings(data)\n      setInitialFetch(false)\n    }\n  }, [data, sectorId, side, initialFetch, prevSectorId, prevSide])\n  \n  const mutation = useMutation(\n    async (\n      coordinates: string[]\n    ) => await updateCoordinates(\n      {sectorId: sectorId, side: side, \n        specificationId: sectorId, coordinates: coordinates} \n    ), {\n      onSuccess: () => {\n        refetch()\n      }\n    }\n  )\n  \n  \n  \n  return {\n    settings: data,\n    settingsStatus: status,\n    settingsRefetch: refetch,\n    updateCoordinates: mutation.mutate,\n    updateCoordinatesStatus: mutation.status\n  }\n}\n\nfunction usePrevious<T>(value: T) {\n  const ref = useRef<T>()\n  useEffect(() => {\n    ref.current = value\n  })\n  return ref.current\n}\n"],"mappings":";;AACA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,aAAa;AAEnD,SACEC,cAAc,EACdC,iBAAiB,QACZ,gCAAgC;AACvC,SAASC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAGnD,OAAO,MAAMC,kBAAkB,GAAGA,CAChCC,QAAgB,EAChBC,IAAmB,EACnBC,eAAuB,KACpB;EAAAC,EAAA;EACH,MAAM;IACJC,IAAI;IAAEC,MAAM;IAAEC;EAChB,CAAC,GAAGb,QAAQ,CAAC,CAAC,aAAa,CAAC,EAC1B;IACEc,OAAO,EAAEA,CAAA,KACPb,cAAc,CAACM,QAAQ,EAAEC,IAAI,EAAEC,eAAe;EAClD,CACF,CAAC;EACD,MAAM,CAACM,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CACJY,QAAQ,EAAEC,WAAW,CACtB,GAAGb,QAAQ,CAAwBc,SAAS,CAAC;EAE9C,MAAMC,YAAY,GAAGC,WAAW,CAACd,QAAQ,CAAC;EAC1C,MAAMe,QAAQ,GAAGD,WAAW,CAACb,IAAI,CAAC;EAElCL,SAAS,CAAC,MAAM;IACd,IAAIY,YAAY,IAAIK,YAAY,KAAIb,QAAQ,IAAIe,QAAQ,KAAId,IAAI,EAAE;MAChEU,WAAW,CAACP,IAAI,CAAC;MACjBK,eAAe,CAAC,KAAK,CAAC;IACxB;EACF,CAAC,EAAE,CAACL,IAAI,EAAEJ,QAAQ,EAAEC,IAAI,EAAEO,YAAY,EAAEK,YAAY,EAAEE,QAAQ,CAAC,CAAC;EAEhE,MAAMC,QAAQ,GAAGxB,WAAW,CAC1B,MACEyB,WAAqB,IAClB,MAAMtB,iBAAiB,CAC1B;IAACK,QAAQ,EAAEA,QAAQ;IAAEC,IAAI,EAAEA,IAAI;IAC7BC,eAAe,EAAEF,QAAQ;IAAEiB,WAAW,EAAEA;EAAW,CACvD,CAAC,EAAE;IACDC,SAAS,EAAEA,CAAA,KAAM;MACfZ,OAAO,CAAC,CAAC;IACX;EACF,CACF,CAAC;EAID,OAAO;IACLI,QAAQ,EAAEN,IAAI;IACde,cAAc,EAAEd,MAAM;IACtBe,eAAe,EAAEd,OAAO;IACxBX,iBAAiB,EAAEqB,QAAQ,CAACK,MAAM;IAClCC,uBAAuB,EAAEN,QAAQ,CAACX;EACpC,CAAC;AACH,CAAC;AAAAF,EAAA,CAlDYJ,kBAAkB;EAAA,QAOzBN,QAAQ,EAWSqB,WAAW,EACfA,WAAW,EASXtB,WAAW;AAAA;AAwB9B,SAASsB,WAAWA,CAAIS,KAAQ,EAAE;EAAAC,GAAA;EAChC,MAAMC,GAAG,GAAG5B,MAAM,CAAI,CAAC;EACvBD,SAAS,CAAC,MAAM;IACd6B,GAAG,CAACC,OAAO,GAAGH,KAAK;EACrB,CAAC,CAAC;EACF,OAAOE,GAAG,CAACC,OAAO;AACpB;AAACF,GAAA,CANQV,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}