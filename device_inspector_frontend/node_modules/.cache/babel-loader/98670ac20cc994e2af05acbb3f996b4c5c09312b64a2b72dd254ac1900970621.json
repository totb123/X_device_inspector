{"ast":null,"code":"var _jsxFileName = \"/Users/Rober/dev/work/x_keeper/new_device_inspector/device_inspector_frontend/device_inspector_frontend/src/features/inspectionsCheck/context/inspectionsVerificationContext.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\n// eslint-disable-next-line @stylistic/max-len\nimport useUnverifiedInspectionsGet from '../hooks/useUnverifiedInspectionsGet';\nimport { useVerifyInspection } from '../hooks/useVerififyInspection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InspectionsVerificationContext = /*#__PURE__*/React.createContext(null);\nconst UnverifiedInspectionsProvider = ({\n  children\n}) => {\n  _s();\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(10);\n  const {\n    inspectionsData,\n    inspectionsStatus,\n    inspectionsRefetch,\n    inspectionsTotal\n  } = useUnverifiedInspectionsGet(currentPage, pageSize);\n  const {\n    uncheckInspection,\n    defectInspection\n  } = useVerifyInspection();\n  const handleRefetch = () => {\n    inspectionsRefetch();\n  };\n  const handlePageSizeChange = (currentPage, size) => {\n    setCurrentPage(currentPage);\n    setPageSize(size);\n  };\n  const verifyInspection = (method, inspectionId) => {\n    setTimeout(() => {\n      switch (method) {\n        case 'uncheck':\n          uncheckInspection.mutate(inspectionId);\n          break;\n        case 'defect':\n          defectInspection.mutate(inspectionId);\n          break;\n        default:\n          break;\n      }\n    }, 500);\n  };\n  useEffect(() => {\n    if (uncheckInspection.isLoading || defectInspection.isLoading) inspectionsRefetch();\n  }, [uncheckInspection.isLoading, defectInspection.isLoading]);\n  return /*#__PURE__*/_jsxDEV(InspectionsVerificationContext.Provider, {\n    value: {\n      inspections: inspectionsData,\n      inspectionsStatus: inspectionsStatus,\n      inspectionsTotal: inspectionsTotal,\n      inspectionsRefetch: handleRefetch,\n      changePageSize: handlePageSizeChange,\n      verifyInspection: verifyInspection,\n      isVerifyLoading: uncheckInspection.isLoading || defectInspection.isLoading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(UnverifiedInspectionsProvider, \"r2xcMKl1jxI+51yB2CrDNTUcf+g=\", false, function () {\n  return [useUnverifiedInspectionsGet, useVerifyInspection];\n});\n_c = UnverifiedInspectionsProvider;\nexport { UnverifiedInspectionsProvider, InspectionsVerificationContext };\nvar _c;\n$RefreshReg$(_c, \"UnverifiedInspectionsProvider\");","map":{"version":3,"names":["React","useEffect","useState","useUnverifiedInspectionsGet","useVerifyInspection","jsxDEV","_jsxDEV","InspectionsVerificationContext","createContext","UnverifiedInspectionsProvider","children","_s","currentPage","setCurrentPage","pageSize","setPageSize","inspectionsData","inspectionsStatus","inspectionsRefetch","inspectionsTotal","uncheckInspection","defectInspection","handleRefetch","handlePageSizeChange","size","verifyInspection","method","inspectionId","setTimeout","mutate","isLoading","Provider","value","inspections","changePageSize","isVerifyLoading","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/Rober/dev/work/x_keeper/new_device_inspector/device_inspector_frontend/device_inspector_frontend/src/features/inspectionsCheck/context/inspectionsVerificationContext.tsx"],"sourcesContent":["import React, { ReactNode, useEffect, useState } from 'react'\n// eslint-disable-next-line @stylistic/max-len\nimport useUnverifiedInspectionsGet from '../hooks/useUnverifiedInspectionsGet'\nimport { TInspection } from '../../../types/inspectionType'\nimport { useVerifyInspection } from '../hooks/useVerififyInspection'\ntype TInspectionsVerificationContext = {\n  inspections: TInspection[] | undefined\n  inspectionsStatus: 'loading' | 'error' | 'success' | 'idle'\n  inspectionsTotal: any\n  inspectionsRefetch: () => void\n  changePageSize: (page: number, size: number) => void\n  verifyInspection: (\n    method: 'uncheck' | 'defect', inspectionId: number\n  ) => void\n  isVerifyLoading: boolean\n}\n\ntype InspectionsVerificationProviderProps = {\n  children: ReactNode\n}\n\nconst InspectionsVerificationContext = React.createContext<\nTInspectionsVerificationContext | null>(null)\n\nconst UnverifiedInspectionsProvider: React.FC<\nInspectionsVerificationProviderProps> = ({children}) => {\n\n  const [currentPage, setCurrentPage] = useState<number>(1)\n  const [pageSize, setPageSize] = useState(10)\n  const {\n    inspectionsData,\n    inspectionsStatus,\n    inspectionsRefetch,\n    inspectionsTotal\n  } = useUnverifiedInspectionsGet(currentPage, pageSize)\n  const {uncheckInspection, defectInspection} = useVerifyInspection()\n\n  const handleRefetch = () => {\n    inspectionsRefetch()\n  }\n\n  const handlePageSizeChange = (currentPage: number, size: number) => {\n    setCurrentPage(currentPage)\n    setPageSize(size)\n  }\n\n  const verifyInspection = (\n    method: 'uncheck' | 'defect', inspectionId: number\n  ) => {\n    setTimeout(() => {\n      switch (method) {\n        case 'uncheck':\n          uncheckInspection.mutate(inspectionId)\n          break\n        case 'defect':\n          defectInspection.mutate(inspectionId)\n          break\n        default:\n          break\n      }\n    }, 500)\n  }\n\n  useEffect(() => {\n    if (uncheckInspection.isLoading || defectInspection.isLoading) \n      inspectionsRefetch()\n    \n  }, [uncheckInspection.isLoading, defectInspection.isLoading])\n\n  return (\n    <InspectionsVerificationContext.Provider value={{ \n      inspections: inspectionsData,\n      inspectionsStatus: inspectionsStatus,\n      inspectionsTotal: inspectionsTotal,\n      inspectionsRefetch: handleRefetch,\n      changePageSize: handlePageSizeChange,\n      verifyInspection: verifyInspection,\n      isVerifyLoading: uncheckInspection.isLoading || \n      defectInspection.isLoading\n    }}>\n      {children}\n    </InspectionsVerificationContext.Provider>\n  )\n}\n\nexport { UnverifiedInspectionsProvider, InspectionsVerificationContext }"],"mappings":";;AAAA,OAAOA,KAAK,IAAeC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC7D;AACA,OAAOC,2BAA2B,MAAM,sCAAsC;AAE9E,SAASC,mBAAmB,QAAQ,gCAAgC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAiBpE,MAAMC,8BAA8B,gBAAGP,KAAK,CAACQ,aAAa,CAClB,IAAI,CAAC;AAE7C,MAAMC,6BAC+B,GAAGA,CAAC;EAACC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAEtD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAS,CAAC,CAAC;EACzD,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM;IACJc,eAAe;IACfC,iBAAiB;IACjBC,kBAAkB;IAClBC;EACF,CAAC,GAAGhB,2BAA2B,CAACS,WAAW,EAAEE,QAAQ,CAAC;EACtD,MAAM;IAACM,iBAAiB;IAAEC;EAAgB,CAAC,GAAGjB,mBAAmB,CAAC,CAAC;EAEnE,MAAMkB,aAAa,GAAGA,CAAA,KAAM;IAC1BJ,kBAAkB,CAAC,CAAC;EACtB,CAAC;EAED,MAAMK,oBAAoB,GAAGA,CAACX,WAAmB,EAAEY,IAAY,KAAK;IAClEX,cAAc,CAACD,WAAW,CAAC;IAC3BG,WAAW,CAACS,IAAI,CAAC;EACnB,CAAC;EAED,MAAMC,gBAAgB,GAAGA,CACvBC,MAA4B,EAAEC,YAAoB,KAC/C;IACHC,UAAU,CAAC,MAAM;MACf,QAAQF,MAAM;QACZ,KAAK,SAAS;UACZN,iBAAiB,CAACS,MAAM,CAACF,YAAY,CAAC;UACtC;QACF,KAAK,QAAQ;UACXN,gBAAgB,CAACQ,MAAM,CAACF,YAAY,CAAC;UACrC;QACF;UACE;MACJ;IACF,CAAC,EAAE,GAAG,CAAC;EACT,CAAC;EAED1B,SAAS,CAAC,MAAM;IACd,IAAImB,iBAAiB,CAACU,SAAS,IAAIT,gBAAgB,CAACS,SAAS,EAC3DZ,kBAAkB,CAAC,CAAC;EAExB,CAAC,EAAE,CAACE,iBAAiB,CAACU,SAAS,EAAET,gBAAgB,CAACS,SAAS,CAAC,CAAC;EAE7D,oBACExB,OAAA,CAACC,8BAA8B,CAACwB,QAAQ;IAACC,KAAK,EAAE;MAC9CC,WAAW,EAAEjB,eAAe;MAC5BC,iBAAiB,EAAEA,iBAAiB;MACpCE,gBAAgB,EAAEA,gBAAgB;MAClCD,kBAAkB,EAAEI,aAAa;MACjCY,cAAc,EAAEX,oBAAoB;MACpCE,gBAAgB,EAAEA,gBAAgB;MAClCU,eAAe,EAAEf,iBAAiB,CAACU,SAAS,IAC5CT,gBAAgB,CAACS;IACnB,CAAE;IAAApB,QAAA,EACCA;EAAQ;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC8B,CAAC;AAE9C,CAAC;AAAA5B,EAAA,CA3DKF,6BAC+B;EAAA,QAS/BN,2BAA2B,EACeC,mBAAmB;AAAA;AAAAoC,EAAA,GAX7D/B,6BAC+B;AA4DrC,SAASA,6BAA6B,EAAEF,8BAA8B;AAAE,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}