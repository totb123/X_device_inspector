{"ast":null,"code":"var _jsxFileName = \"/Users/Rober/dev/work/x_keeper/new_device_inspector/device_inspector_frontend/src/features/latestInspectionImage/components/sectorPicker.tsx\",\n  _s = $RefreshSig$();\nimport { Button, Select, Space, Spin } from 'antd';\nimport React from 'react';\nimport { useSectorGet } from '../../../hooks/useSectorGet';\nimport mapSectorIds from '../../../utils/sectorMapper';\nimport { useImage, useUpdateImage } from '../context/latestInspectionImageContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const SectorPicker = () => {\n  _s();\n  const {\n    sectors,\n    sectorsStatus\n  } = useSectorGet();\n  const updateImageData = useUpdateImage();\n  const imageData = useImage();\n  const handleDataInput = updates => {\n    updateImageData({\n      ...imageData,\n      ...updates\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Space, {\n      children: [sectorsStatus == 'success' ? /*#__PURE__*/_jsxDEV(Select, {\n        options: mapSectorIds(sectors)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Spin, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        disabled: sectorsStatus !== 'success',\n        children: \"\\u041F\\u043E\\u0434\\u0442\\u0432\\u0435\\u0440\\u0434\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n_s(SectorPicker, \"JhyswgmgJqeqw3849TlXAVWznKM=\", false, function () {\n  return [useSectorGet, useUpdateImage, useImage];\n});\n_c = SectorPicker;\nvar _c;\n$RefreshReg$(_c, \"SectorPicker\");","map":{"version":3,"names":["Button","Select","Space","Spin","React","useSectorGet","mapSectorIds","useImage","useUpdateImage","jsxDEV","_jsxDEV","Fragment","_Fragment","SectorPicker","_s","sectors","sectorsStatus","updateImageData","imageData","handleDataInput","updates","children","options","fileName","_jsxFileName","lineNumber","columnNumber","disabled","_c","$RefreshReg$"],"sources":["/Users/Rober/dev/work/x_keeper/new_device_inspector/device_inspector_frontend/src/features/latestInspectionImage/components/sectorPicker.tsx"],"sourcesContent":["import { Button, Select, Space, Spin } from 'antd'\nimport React from 'react'\nimport { useSectorGet } from '../../../hooks/useSectorGet'\nimport mapSectorIds from '../../../utils/sectorMapper'\nimport { TSector } from '../../../types/sectorType'\nimport {\n  ImageContextType\n} from '../types/latestInspectionImageContextType'\n\nimport { \n  useImage, \n  useUpdateImage \n} from '../context/latestInspectionImageContext'\nexport const SectorPicker: React.FC = () => {\n  const {sectors, sectorsStatus} = useSectorGet()\n  \n  const updateImageData = useUpdateImage()\n  const imageData = useImage()\n  \n  const handleDataInput = (\n    updates: Partial<ImageContextType>\n  ) => {\n    updateImageData({\n      ...imageData,\n      ...updates\n    })\n  }\n  return <>\n    <Space>\n      {sectorsStatus == 'success' \n        ? <Select\n          options={mapSectorIds(sectors as TSector[])}\n        />\n        : <Spin />\n      }\n      <Button disabled={sectorsStatus !== 'success'}>\n        Подтвердить\n      </Button>\n    </Space>\n  </>\n}"],"mappings":";;AAAA,SAASA,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,IAAI,QAAQ,MAAM;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,6BAA6B;AAC1D,OAAOC,YAAY,MAAM,6BAA6B;AAMtD,SACEC,QAAQ,EACRC,cAAc,QACT,yCAAyC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAChD,OAAO,MAAMC,YAAsB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1C,MAAM;IAACC,OAAO;IAAEC;EAAa,CAAC,GAAGX,YAAY,CAAC,CAAC;EAE/C,MAAMY,eAAe,GAAGT,cAAc,CAAC,CAAC;EACxC,MAAMU,SAAS,GAAGX,QAAQ,CAAC,CAAC;EAE5B,MAAMY,eAAe,GACnBC,OAAkC,IAC/B;IACHH,eAAe,CAAC;MACd,GAAGC,SAAS;MACZ,GAAGE;IACL,CAAC,CAAC;EACJ,CAAC;EACD,oBAAOV,OAAA,CAAAE,SAAA;IAAAS,QAAA,eACLX,OAAA,CAACR,KAAK;MAAAmB,QAAA,GACHL,aAAa,IAAI,SAAS,gBACvBN,OAAA,CAACT,MAAM;QACPqB,OAAO,EAAEhB,YAAY,CAACS,OAAoB;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7C,CAAC,gBACAhB,OAAA,CAACP,IAAI;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAEZhB,OAAA,CAACV,MAAM;QAAC2B,QAAQ,EAAEX,aAAa,KAAK,SAAU;QAAAK,QAAA,EAAC;MAE/C;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ;EAAC,gBACR,CAAC;AACL,CAAC;AAAAZ,EAAA,CA3BYD,YAAsB;EAAA,QACAR,YAAY,EAErBG,cAAc,EACpBD,QAAQ;AAAA;AAAAqB,EAAA,GAJff,YAAsB;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}