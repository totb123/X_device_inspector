{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery } from 'react-query';\nimport { getInspections, getInspectionsTotal } from '../../../services/inspectionService';\nimport { queryClient } from '../../../App';\nfunction generateQuery(filters, offset, limit) {\n  let target = new URLSearchParams();\n  target.append('skip', ((offset - 1) * 10).toString());\n  target.append('limit', limit.toString());\n  if (filters.sectorIds.length) {\n    filters.sectorIds.forEach(sectorId => target.append('sector_ids', sectorId.toString()));\n  }\n  if (filters.multiboardIds.length) {\n    filters.multiboardIds.forEach(multiboardId => target.append('multi_board_ids', multiboardId));\n  }\n  if (filters.datamatrices.length) {\n    filters.datamatrices.forEach(datatmatrix => target.append('datamatrices', datatmatrix));\n  }\n  if (filters.parties.length) {\n    filters.parties.forEach(parties => target.append('parties', parties));\n  }\n  if (filters.statuses.length) {\n    filters.statuses.forEach(status => target.append('status', status));\n  }\n  if (filters.startDate !== undefined) target.append('start_date', filters.startDate.toISOString());\n  if (filters.endDate !== undefined) target.append('end_date', filters.endDate.toISOString());\n  console.warn(target);\n  return target;\n}\nexport default function useInspectionsSearchGet(filters, offset, limit) {\n  _s();\n  const total = useQuery({\n    queryKey: ['inspectionsTotal'],\n    queryFn: async () => await getInspectionsTotal(generateQuery(filters, offset, limit))\n  });\n  const {\n    data,\n    status,\n    refetch\n  } = useQuery({\n    queryKey: ['inspectionsSearch'],\n    queryFn: async () => await getInspections(generateQuery(filters, offset, limit)),\n    initialData: () => {\n      return queryClient.getQueryData('inspectionsSearch');\n    }\n  });\n  return {\n    inspectionsData: data === null || data === void 0 ? void 0 : data.sort((i1, i2) => i1.id - i2.id),\n    inspectionsStatus: status,\n    inspectionsRefetch: refetch,\n    inspectionsTotal: total\n  };\n}\n_s(useInspectionsSearchGet, \"37H9VqpEeid8Ow1xctpKVwRaAwY=\", false, function () {\n  return [useQuery, useQuery];\n});","map":{"version":3,"names":["useQuery","getInspections","getInspectionsTotal","queryClient","generateQuery","filters","offset","limit","target","URLSearchParams","append","toString","sectorIds","length","forEach","sectorId","multiboardIds","multiboardId","datamatrices","datatmatrix","parties","statuses","status","startDate","undefined","toISOString","endDate","console","warn","useInspectionsSearchGet","_s","total","queryKey","queryFn","data","refetch","initialData","getQueryData","inspectionsData","sort","i1","i2","id","inspectionsStatus","inspectionsRefetch","inspectionsTotal"],"sources":["/Users/Rober/dev/work/x_keeper/new_device_inspector/device_inspector_frontend/src/features/inspectionsSearch/hooks/useInspectionGet.ts"],"sourcesContent":["import {useQuery} from 'react-query'\nimport {\n  getInspections,\n  getInspectionsTotal\n} from '../../../services/inspectionService'\nimport {queryClient} from '../../../App'\nimport {TInspection} from '../../../types/inspectionType'\nimport { \n  SearchFilterContextType \n} from '../types/searchFilterContextType'\n\nfunction generateQuery(filters: SearchFilterContextType, \n  offset: number, \n  limit: number\n): URLSearchParams {    \n  let target = new URLSearchParams()\n  target.append('skip', ((offset - 1) * 10).toString())\n  target.append('limit', limit.toString())\n  if (filters.sectorIds.length) {\n    filters.sectorIds.forEach(\n      sectorId => target.append('sector_ids', sectorId.toString())\n    )\n  }\n  if (filters.multiboardIds.length) {\n    filters.multiboardIds.forEach(\n      multiboardId => target.append('multi_board_ids', multiboardId)\n    )\n  }\n  \n  if (filters.datamatrices.length) {\n    filters.datamatrices.forEach(\n      datatmatrix => target.append('datamatrices', datatmatrix)\n    )\n  }\n  if (filters.parties.length) {\n    filters.parties.forEach(\n      parties => target.append('parties', parties)\n    )\n  }\n  if (filters.statuses.length) {\n    filters.statuses.forEach(\n      status => target.append('status', status)\n    )\n  }\n  if (filters.startDate !== undefined)\n    target.append('start_date', filters.startDate.toISOString())\n  \n  if (filters.endDate !== undefined)\n    target.append('end_date', filters.endDate.toISOString())\n  console.warn(target)\n  return target\n}\n\n\nexport default function useInspectionsSearchGet(\n  filters: SearchFilterContextType, \n  offset: number, \n  limit: number\n) {\n\n  const total = useQuery<number>({queryKey: ['inspectionsTotal'], \n    queryFn: async () => \n      await getInspectionsTotal(generateQuery(filters, offset, limit))\n  })\n  \n  const {\n    data,\n    status,\n    refetch\n  } = useQuery<TInspection[], string>(\n    {\n      queryKey: ['inspectionsSearch'],\n      queryFn: async ()  => await getInspections(\n        generateQuery(filters, offset, limit)), initialData: () => {\n        return queryClient.getQueryData('inspectionsSearch')\n      }\n    })\n\n\n  return {\n    inspectionsData: data?.sort((i1, i2) => i1.id - i2.id), \n    inspectionsStatus: status, \n    inspectionsRefetch: refetch, \n    inspectionsTotal: total\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}