{"ast":null,"code":"function getParams(datamatrix, newStatus) {\n  const params = new URLSearchParams();\n  params.append('inspection_id', datamatrix.toString());\n  if (newStatus !== undefined) params.append('new_status', newStatus);\n  return params;\n}\nexport async function getAllStatuses() {\n  const res = await fetch(`${process.env.REACT_APP_API_BASE_URL}/statuses`);\n  console.log(await res.json());\n  return await res.json();\n}\nexport async function getStatus(inspectionId) {\n  const res = await fetch(\n  // eslint-disable-next-line @stylistic/max-len\n  `${process.env.REACT_APP_API_BASE_URL}/get_status?${getParams(inspectionId)}`);\n  return await res.json();\n}\nexport async function updateStatus(inspectionId, newStatus) {\n  const res = await fetch(\n  // eslint-disable-next-line @stylistic/max-len\n  `${process.env.REACT_APP_API_BASE_URL}/change_status?${getParams(inspectionId, newStatus)}`, {\n    method: 'POST'\n  });\n  return await res.json();\n}","map":{"version":3,"names":["getParams","datamatrix","newStatus","params","URLSearchParams","append","toString","undefined","getAllStatuses","res","fetch","process","env","REACT_APP_API_BASE_URL","console","log","json","getStatus","inspectionId","updateStatus","method"],"sources":["/Users/Rober/dev/work/x_keeper/new_device_inspector/device_inspector_frontend/device_inspector_frontend/src/services/statusService.ts"],"sourcesContent":["import { InspectionStatus } from '../types/inspectionType'\n\nfunction getParams(datamatrix: number, newStatus?: string) {\n  const params = new URLSearchParams()\n  params.append('inspection_id', datamatrix.toString())\n  if (newStatus !== undefined)\n    params.append('new_status', newStatus)\n  return params\n}\n\n\nexport async function getAllStatuses(): Promise<String[]> {\n  const res = await fetch(\n    `${process.env.REACT_APP_API_BASE_URL}/statuses`\n  )\n  console.log(await res.json())\n  return await res.json()\n}\n\nexport async function getStatus(inspectionId: number): Promise<String> {\n  const res = await fetch(\n    // eslint-disable-next-line @stylistic/max-len\n    `${process.env.REACT_APP_API_BASE_URL}/get_status?${getParams(inspectionId)}`\n  )\n  return await res.json()\n}\n\nexport async function updateStatus(\n  inspectionId: number, newStatus: InspectionStatus\n): Promise<Boolean> {\n  const res = await fetch(\n    // eslint-disable-next-line @stylistic/max-len\n    `${process.env.REACT_APP_API_BASE_URL}/change_status?${getParams(inspectionId, newStatus)}`, \n    { method: 'POST' }\n  )\n  return await res.json()\n}"],"mappings":"AAEA,SAASA,SAASA,CAACC,UAAkB,EAAEC,SAAkB,EAAE;EACzD,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;EACpCD,MAAM,CAACE,MAAM,CAAC,eAAe,EAAEJ,UAAU,CAACK,QAAQ,CAAC,CAAC,CAAC;EACrD,IAAIJ,SAAS,KAAKK,SAAS,EACzBJ,MAAM,CAACE,MAAM,CAAC,YAAY,EAAEH,SAAS,CAAC;EACxC,OAAOC,MAAM;AACf;AAGA,OAAO,eAAeK,cAAcA,CAAA,EAAsB;EACxD,MAAMC,GAAG,GAAG,MAAMC,KAAK,CACpB,GAAEC,OAAO,CAACC,GAAG,CAACC,sBAAuB,WACxC,CAAC;EACDC,OAAO,CAACC,GAAG,CAAC,MAAMN,GAAG,CAACO,IAAI,CAAC,CAAC,CAAC;EAC7B,OAAO,MAAMP,GAAG,CAACO,IAAI,CAAC,CAAC;AACzB;AAEA,OAAO,eAAeC,SAASA,CAACC,YAAoB,EAAmB;EACrE,MAAMT,GAAG,GAAG,MAAMC,KAAK;EACrB;EACC,GAAEC,OAAO,CAACC,GAAG,CAACC,sBAAuB,eAAcb,SAAS,CAACkB,YAAY,CAAE,EAC9E,CAAC;EACD,OAAO,MAAMT,GAAG,CAACO,IAAI,CAAC,CAAC;AACzB;AAEA,OAAO,eAAeG,YAAYA,CAChCD,YAAoB,EAAEhB,SAA2B,EAC/B;EAClB,MAAMO,GAAG,GAAG,MAAMC,KAAK;EACrB;EACC,GAAEC,OAAO,CAACC,GAAG,CAACC,sBAAuB,kBAAiBb,SAAS,CAACkB,YAAY,EAAEhB,SAAS,CAAE,EAAC,EAC3F;IAAEkB,MAAM,EAAE;EAAO,CACnB,CAAC;EACD,OAAO,MAAMX,GAAG,CAACO,IAAI,CAAC,CAAC;AACzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}