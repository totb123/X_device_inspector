{"ast":null,"code":"var key = {\n  fullscreenEnabled: 0,\n  fullscreenElement: 1,\n  requestFullscreen: 2,\n  exitFullscreen: 3,\n  fullscreenchange: 4,\n  fullscreenerror: 5,\n  fullscreen: 6\n};\nvar webkit = ['webkitFullscreenEnabled', 'webkitFullscreenElement', 'webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitfullscreenchange', 'webkitfullscreenerror', '-webkit-full-screen'];\nvar moz = ['mozFullScreenEnabled', 'mozFullScreenElement', 'mozRequestFullScreen', 'mozCancelFullScreen', 'mozfullscreenchange', 'mozfullscreenerror', '-moz-full-screen'];\nvar ms = ['msFullscreenEnabled', 'msFullscreenElement', 'msRequestFullscreen', 'msExitFullscreen', 'MSFullscreenChange', 'MSFullscreenError', '-ms-fullscreen'];\n// so it doesn't throw if no window or document\nvar document = typeof window !== 'undefined' && typeof window.document !== 'undefined' ? window.document : {};\nvar vendor = 'fullscreenEnabled' in document && Object.keys(key) || webkit[0] in document && webkit || moz[0] in document && moz || ms[0] in document && ms || [];\nvar fscreen = {\n  requestFullscreen: function (element) {\n    return element[vendor[key.requestFullscreen]]();\n  },\n  requestFullscreenFunction: function (element) {\n    return element[vendor[key.requestFullscreen]];\n  },\n  get exitFullscreen() {\n    return document[vendor[key.exitFullscreen]].bind(document);\n  },\n  get fullscreenPseudoClass() {\n    return \":\" + vendor[key.fullscreen];\n  },\n  addEventListener: function (type, handler, options) {\n    return document.addEventListener(vendor[key[type]], handler, options);\n  },\n  removeEventListener: function (type, handler, options) {\n    return document.removeEventListener(vendor[key[type]], handler, options);\n  },\n  get fullscreenEnabled() {\n    return Boolean(document[vendor[key.fullscreenEnabled]]);\n  },\n  set fullscreenEnabled(val) {},\n  get fullscreenElement() {\n    return document[vendor[key.fullscreenElement]];\n  },\n  set fullscreenElement(val) {},\n  get onfullscreenchange() {\n    return document[(\"on\" + vendor[key.fullscreenchange]).toLowerCase()];\n  },\n  set onfullscreenchange(handler) {\n    return document[(\"on\" + vendor[key.fullscreenchange]).toLowerCase()] = handler;\n  },\n  get onfullscreenerror() {\n    return document[(\"on\" + vendor[key.fullscreenerror]).toLowerCase()];\n  },\n  set onfullscreenerror(handler) {\n    return document[(\"on\" + vendor[key.fullscreenerror]).toLowerCase()] = handler;\n  }\n};\nexport default fscreen;","map":{"version":3,"names":["key","fullscreenEnabled","fullscreenElement","requestFullscreen","exitFullscreen","fullscreenchange","fullscreenerror","fullscreen","webkit","moz","ms","document","window","vendor","Object","keys","fscreen","element","requestFullscreenFunction","bind","fullscreenPseudoClass","addEventListener","type","handler","options","removeEventListener","Boolean","val","onfullscreenchange","toLowerCase","onfullscreenerror"],"sources":["/Users/Rober/dev/work/x_keeper/new_device_inspector/device_inspector_frontend/node_modules/fscreen/src/fscreen.js"],"sourcesContent":["const key = {\n  fullscreenEnabled: 0,\n  fullscreenElement: 1,\n  requestFullscreen: 2,\n  exitFullscreen: 3,\n  fullscreenchange: 4,\n  fullscreenerror: 5,\n  fullscreen: 6\n};\n\nconst webkit = [\n  'webkitFullscreenEnabled',\n  'webkitFullscreenElement',\n  'webkitRequestFullscreen',\n  'webkitExitFullscreen',\n  'webkitfullscreenchange',\n  'webkitfullscreenerror',\n  '-webkit-full-screen',\n];\n\nconst moz = [\n  'mozFullScreenEnabled',\n  'mozFullScreenElement',\n  'mozRequestFullScreen',\n  'mozCancelFullScreen',\n  'mozfullscreenchange',\n  'mozfullscreenerror',\n  '-moz-full-screen',\n];\n\nconst ms = [\n  'msFullscreenEnabled',\n  'msFullscreenElement',\n  'msRequestFullscreen',\n  'msExitFullscreen',\n  'MSFullscreenChange',\n  'MSFullscreenError',\n  '-ms-fullscreen',\n];\n\n// so it doesn't throw if no window or document\nconst document = typeof window !== 'undefined' && typeof window.document !== 'undefined' ? window.document : {};\n\nconst vendor = (\n  ('fullscreenEnabled' in document && Object.keys(key)) ||\n  (webkit[0] in document && webkit) ||\n  (moz[0] in document && moz) ||\n  (ms[0] in document && ms) ||\n  []\n);\n\nexport default {\n  requestFullscreen: element => element[vendor[key.requestFullscreen]](),\n  requestFullscreenFunction: element => element[vendor[key.requestFullscreen]],\n  get exitFullscreen() { return document[vendor[key.exitFullscreen]].bind(document); },\n  get fullscreenPseudoClass() { return `:${vendor[key.fullscreen]}`; },\n  addEventListener: (type, handler, options) => document.addEventListener(vendor[key[type]], handler, options),\n  removeEventListener: (type, handler, options) => document.removeEventListener(vendor[key[type]], handler, options),\n  get fullscreenEnabled() { return Boolean(document[vendor[key.fullscreenEnabled]]); },\n  set fullscreenEnabled(val) {},\n  get fullscreenElement() { return document[vendor[key.fullscreenElement]]; },\n  set fullscreenElement(val) {},\n  get onfullscreenchange() { return document[`on${vendor[key.fullscreenchange]}`.toLowerCase()]; },\n  set onfullscreenchange(handler) { return document[`on${vendor[key.fullscreenchange]}`.toLowerCase()] = handler; },\n  get onfullscreenerror() { return document[`on${vendor[key.fullscreenerror]}`.toLowerCase()]; },\n  set onfullscreenerror(handler) { return document[`on${vendor[key.fullscreenerror]}`.toLowerCase()] = handler; },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}