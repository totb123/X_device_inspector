{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery, useQueryClient } from 'react-query';\nimport { getLastImage } from '../services/getLastImage';\nimport { useState } from 'react';\nimport { useDebounce } from '../../../hooks/useDebounce';\nexport const useLastImageGet = refetchDelay => {\n  _s();\n  const debounce = useDebounce();\n  const queryClient = useQueryClient();\n  const [sectorId, setSector] = useState();\n  const updateSector = updatedSectorId => {\n    queryClient.invalidateQueries(['lastImage', {\n      id: sectorId\n    }]);\n    setSector(updatedSectorId);\n  };\n  const {\n    data,\n    status,\n    refetch,\n    dataUpdatedAt\n  } = useQuery(['lastImage', {\n    id: sectorId\n  }], {\n    queryFn: () => sectorId === undefined ? '' : getLastImage(sectorId),\n    refetchInterval: refetchDelay\n  });\n  return {\n    lastImageString: data,\n    lastImageStatus: status,\n    lastImageUpdatedAt: dataUpdatedAt,\n    selectedSector: sectorId,\n    lastImageRefetch: refetch,\n    updateSectorId: updateSector\n  };\n};\n_s(useLastImageGet, \"YtjYMZFgRBAGJhbOVYVZPAf6UIY=\", false, function () {\n  return [useDebounce, useQueryClient, useQuery];\n});","map":{"version":3,"names":["useQuery","useQueryClient","getLastImage","useState","useDebounce","useLastImageGet","refetchDelay","_s","debounce","queryClient","sectorId","setSector","updateSector","updatedSectorId","invalidateQueries","id","data","status","refetch","dataUpdatedAt","queryFn","undefined","refetchInterval","lastImageString","lastImageStatus","lastImageUpdatedAt","selectedSector","lastImageRefetch","updateSectorId"],"sources":["/Users/Rober/dev/work/x_keeper/new_device_inspector/device_inspector_frontend/src/features/latestInspectionImage/hooks/useLastImageGet.ts"],"sourcesContent":["import { useQuery, useQueryClient } from 'react-query'\nimport { getLastImage } from '../services/getLastImage'\nimport { useEffect, useState } from 'react'\nimport { useDebounce } from '../../../hooks/useDebounce'\nimport { TSector } from '../../../types/sectorType'\n\nexport const useLastImageGet = (\n  refetchDelay: number\n) => {\n  const debounce = useDebounce()\n  \n  const queryClient = useQueryClient()\n\n  const [sectorId, setSector] = useState<number | undefined>()\n  const updateSector = (updatedSectorId: number | undefined) => {\n    queryClient.invalidateQueries(['lastImage', {id: sectorId}])\n    setSector(updatedSectorId)\n  }\n\n  const {data, status, refetch, dataUpdatedAt} = useQuery<string, string>(\n    ['lastImage', {id: sectorId}],\n    {\n      queryFn: () => sectorId === undefined ? '' : getLastImage(sectorId),\n      refetchInterval: refetchDelay,\n    }\n  )\n  \n  return {\n    lastImageString: data, \n    lastImageStatus: status, \n    lastImageUpdatedAt: dataUpdatedAt,\n    selectedSector: sectorId,\n    lastImageRefetch: refetch,\n    updateSectorId: updateSector,\n  }\n}"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,cAAc,QAAQ,aAAa;AACtD,SAASC,YAAY,QAAQ,0BAA0B;AACvD,SAAoBC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,4BAA4B;AAGxD,OAAO,MAAMC,eAAe,GAC1BC,YAAoB,IACjB;EAAAC,EAAA;EACH,MAAMC,QAAQ,GAAGJ,WAAW,CAAC,CAAC;EAE9B,MAAMK,WAAW,GAAGR,cAAc,CAAC,CAAC;EAEpC,MAAM,CAACS,QAAQ,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAqB,CAAC;EAC5D,MAAMS,YAAY,GAAIC,eAAmC,IAAK;IAC5DJ,WAAW,CAACK,iBAAiB,CAAC,CAAC,WAAW,EAAE;MAACC,EAAE,EAAEL;IAAQ,CAAC,CAAC,CAAC;IAC5DC,SAAS,CAACE,eAAe,CAAC;EAC5B,CAAC;EAED,MAAM;IAACG,IAAI;IAAEC,MAAM;IAAEC,OAAO;IAAEC;EAAa,CAAC,GAAGnB,QAAQ,CACrD,CAAC,WAAW,EAAE;IAACe,EAAE,EAAEL;EAAQ,CAAC,CAAC,EAC7B;IACEU,OAAO,EAAEA,CAAA,KAAMV,QAAQ,KAAKW,SAAS,GAAG,EAAE,GAAGnB,YAAY,CAACQ,QAAQ,CAAC;IACnEY,eAAe,EAAEhB;EACnB,CACF,CAAC;EAED,OAAO;IACLiB,eAAe,EAAEP,IAAI;IACrBQ,eAAe,EAAEP,MAAM;IACvBQ,kBAAkB,EAAEN,aAAa;IACjCO,cAAc,EAAEhB,QAAQ;IACxBiB,gBAAgB,EAAET,OAAO;IACzBU,cAAc,EAAEhB;EAClB,CAAC;AACH,CAAC;AAAAL,EAAA,CA7BYF,eAAe;EAAA,QAGTD,WAAW,EAERH,cAAc,EAQaD,QAAQ;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}