{"ast":null,"code":"var _jsxFileName = \"/Users/Rober/dev/work/x_keeper/new_device_inspector/device_inspector_frontend/src/features/latestInspectionImage/context/latestInspectionImageContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from 'react';\nimport { defaultImageContext } from '../types/latestInspectionImageContextType';\nimport { useLastImageGet } from '../hooks/useLastImageGet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ImageContext = /*#__PURE__*/React.createContext(defaultImageContext);\nexport function useImage() {\n  _s();\n  return useContext(ImageContext);\n}\n_s(useImage, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const LatestInspectionImageContextProvider = ({\n  children\n}) => {\n  _s2();\n  const [sector, setSector] = useState();\n  const updateSector = updatedSector => {\n    console.log('updateSector', updatedSector);\n    setSector(updatedSector);\n  };\n  const {\n    lastImageString,\n    lastImageStatus,\n    lastImageUpdatedAt,\n    updateSectorId,\n    lastImageRefetch\n  } = useLastImageGet(4000);\n  const [image, setImage] = useState({\n    ...defaultImageContext,\n    updateSector: updateSector\n  });\n  useEffect(() => {\n    if (sector !== undefined) updateSectorId(sector.id);\n  }, [sector, updateSectorId]);\n  useEffect(() => {\n    if (lastImageStatus === 'success') {\n      setImage({\n        ...image,\n        latestImage: lastImageString,\n        selectedSector: sector\n      });\n    }\n  }, [lastImageStatus]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ImageContext.Provider, {\n      value: image,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s2(LatestInspectionImageContextProvider, \"zDma7tMWbr+Sun183NoNzc+ck8Y=\", false, function () {\n  return [useLastImageGet];\n});\n_c = LatestInspectionImageContextProvider;\nvar _c;\n$RefreshReg$(_c, \"LatestInspectionImageContextProvider\");","map":{"version":3,"names":["React","useContext","useEffect","useState","defaultImageContext","useLastImageGet","jsxDEV","_jsxDEV","Fragment","_Fragment","ImageContext","createContext","useImage","_s","LatestInspectionImageContextProvider","children","_s2","sector","setSector","updateSector","updatedSector","console","log","lastImageString","lastImageStatus","lastImageUpdatedAt","updateSectorId","lastImageRefetch","image","setImage","undefined","id","latestImage","selectedSector","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/Rober/dev/work/x_keeper/new_device_inspector/device_inspector_frontend/src/features/latestInspectionImage/context/latestInspectionImageContext.tsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport {\n  ImageContextType as ContextType, \n  defaultImageContext\n} from '../types/latestInspectionImageContextType'\nimport { useLastImageGet } from '../hooks/useLastImageGet'\nimport { TSector } from '../../../types/sectorType'\ntype ImageContextProps = {\n  children: React.ReactNode\n}\n\nconst ImageContext =\n React.createContext<ContextType>(defaultImageContext)\n\nexport function useImage()  {\n  return useContext(ImageContext)\n}\nexport const LatestInspectionImageContextProvider: \nReact.FC<ImageContextProps> = (\n  {children}\n) => {\n  const [sector, setSector] = useState<TSector>()\n  const updateSector = (updatedSector: TSector | undefined) => {\n    console.log('updateSector', updatedSector)\n    setSector(updatedSector)\n  }\n\n  \n  const {\n    lastImageString, \n    lastImageStatus, \n    lastImageUpdatedAt,\n    updateSectorId, \n    lastImageRefetch\n  } =  useLastImageGet(4000) \n\n  const [image, setImage] = useState(\n    {...defaultImageContext,updateSector: updateSector}\n  )\n\n  useEffect(() => {\n    if (sector !== undefined)\n      updateSectorId(sector.id)\n  },[sector, updateSectorId])\n\n  useEffect(() => {\n    if(lastImageStatus === 'success'){ \n      setImage({\n        ...image,\n        latestImage: lastImageString,\n        selectedSector: sector\n      })\n    }\n  }, [lastImageStatus])\n\n  return (\n    <>\n      <ImageContext.Provider value={image}>\n        {children}\n      </ImageContext.Provider>\n    </>\n  )\n}\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC9D,SAEEC,mBAAmB,QACd,2CAA2C;AAClD,SAASC,eAAe,QAAQ,0BAA0B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAM1D,MAAMC,YAAY,gBACjBV,KAAK,CAACW,aAAa,CAAcP,mBAAmB,CAAC;AAEtD,OAAO,SAASQ,QAAQA,CAAA,EAAI;EAAAC,EAAA;EAC1B,OAAOZ,UAAU,CAACS,YAAY,CAAC;AACjC;AAACG,EAAA,CAFeD,QAAQ;AAGxB,OAAO,MAAME,oCACc,GAAGA,CAC5B;EAACC;AAAQ,CAAC,KACP;EAAAC,GAAA;EACH,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGf,QAAQ,CAAU,CAAC;EAC/C,MAAMgB,YAAY,GAAIC,aAAkC,IAAK;IAC3DC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,aAAa,CAAC;IAC1CF,SAAS,CAACE,aAAa,CAAC;EAC1B,CAAC;EAGD,MAAM;IACJG,eAAe;IACfC,eAAe;IACfC,kBAAkB;IAClBC,cAAc;IACdC;EACF,CAAC,GAAItB,eAAe,CAAC,IAAI,CAAC;EAE1B,MAAM,CAACuB,KAAK,EAAEC,QAAQ,CAAC,GAAG1B,QAAQ,CAChC;IAAC,GAAGC,mBAAmB;IAACe,YAAY,EAAEA;EAAY,CACpD,CAAC;EAEDjB,SAAS,CAAC,MAAM;IACd,IAAIe,MAAM,KAAKa,SAAS,EACtBJ,cAAc,CAACT,MAAM,CAACc,EAAE,CAAC;EAC7B,CAAC,EAAC,CAACd,MAAM,EAAES,cAAc,CAAC,CAAC;EAE3BxB,SAAS,CAAC,MAAM;IACd,IAAGsB,eAAe,KAAK,SAAS,EAAC;MAC/BK,QAAQ,CAAC;QACP,GAAGD,KAAK;QACRI,WAAW,EAAET,eAAe;QAC5BU,cAAc,EAAEhB;MAClB,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACO,eAAe,CAAC,CAAC;EAErB,oBACEjB,OAAA,CAAAE,SAAA;IAAAM,QAAA,eACER,OAAA,CAACG,YAAY,CAACwB,QAAQ;MAACC,KAAK,EAAEP,KAAM;MAAAb,QAAA,EACjCA;IAAQ;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACY;EAAC,gBACxB,CAAC;AAEP,CAAC;AAAAvB,GAAA,CA7CYF,oCACc;EAAA,QAgBpBT,eAAe;AAAA;AAAAmC,EAAA,GAjBT1B,oCACc;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}