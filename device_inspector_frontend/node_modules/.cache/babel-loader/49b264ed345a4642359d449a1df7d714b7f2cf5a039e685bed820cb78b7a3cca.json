{"ast":null,"code":"var _jsxFileName = \"/Users/Rober/dev/work/x_keeper/new_device_inspector/device_inspector_frontend/src/components/sectorInput.tsx\",\n  _s = $RefreshSig$();\nimport { Select, Spin } from 'antd';\nimport { useSectorGet } from '../hooks/useSectorGet';\nimport React from 'react';\nimport mapSectorIds from '../utils/sectorMapper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SectorInput = ({\n  onChange,\n  isMultiple = true,\n  allowClear = true,\n  defaultValue\n}) => {\n  _s();\n  const {\n    sectors,\n    sectorStatus\n  } = useSectorGet();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '200px'\n    },\n    children: sectorStatus == 'success' ? /*#__PURE__*/_jsxDEV(Select, {\n      mode: isMultiple ? 'multiple' : undefined,\n      allowClear: allowClear,\n      defaultValue: defaultValue,\n      disabled: sectorStatus != 'success',\n      onChange: onChange,\n      options: mapSectorIds(sectors)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(Spin, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 10\n  }, this);\n};\n_s(SectorInput, \"JLMWkkyHaRR6FvG+3YQDvQUHREI=\", false, function () {\n  return [useSectorGet];\n});\n_c = SectorInput;\nvar _c;\n$RefreshReg$(_c, \"SectorInput\");","map":{"version":3,"names":["Select","Spin","useSectorGet","React","mapSectorIds","jsxDEV","_jsxDEV","SectorInput","onChange","isMultiple","allowClear","defaultValue","_s","sectors","sectorStatus","style","width","children","mode","undefined","disabled","options","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/Rober/dev/work/x_keeper/new_device_inspector/device_inspector_frontend/src/components/sectorInput.tsx"],"sourcesContent":["import { Select, Spin } from 'antd'\nimport { useSectorGet } from '../hooks/useSectorGet'\nimport React from 'react'\nimport mapSectorIds from '../utils/sectorMapper'\nimport { TSector } from '../types/sectorType'\n\ntype SectorInputProps = {\n  isMultiple?: boolean \n  allowClear?: boolean\n  defaultValue?: {label: string, value: number}\n  onChange: (values: any) => void\n}\n\nexport const SectorInput: React.FC<SectorInputProps> = ({\n  onChange, isMultiple = true, allowClear = true, defaultValue\n}) => {\n  const {sectors, sectorStatus} = useSectorGet()\n  return <div style={{ width: '200px' }}>\n    {sectorStatus == 'success' ?\n      <Select mode={isMultiple ? 'multiple' : undefined}\n        allowClear={allowClear}\n        defaultValue={defaultValue}\n        disabled={sectorStatus != 'success'}\n        onChange={onChange}\n        options={mapSectorIds(sectors as TSector[])} />\n      : <Spin />}\n  </div>\n}"],"mappings":";;AAAA,SAASA,MAAM,EAAEC,IAAI,QAAQ,MAAM;AACnC,SAASC,YAAY,QAAQ,uBAAuB;AACpD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,YAAY,MAAM,uBAAuB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAUhD,OAAO,MAAMC,WAAuC,GAAGA,CAAC;EACtDC,QAAQ;EAAEC,UAAU,GAAG,IAAI;EAAEC,UAAU,GAAG,IAAI;EAAEC;AAClD,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM;IAACC,OAAO;IAAEC;EAAY,CAAC,GAAGZ,YAAY,CAAC,CAAC;EAC9C,oBAAOI,OAAA;IAAKS,KAAK,EAAE;MAAEC,KAAK,EAAE;IAAQ,CAAE;IAAAC,QAAA,EACnCH,YAAY,IAAI,SAAS,gBACxBR,OAAA,CAACN,MAAM;MAACkB,IAAI,EAAET,UAAU,GAAG,UAAU,GAAGU,SAAU;MAChDT,UAAU,EAAEA,UAAW;MACvBC,YAAY,EAAEA,YAAa;MAC3BS,QAAQ,EAAEN,YAAY,IAAI,SAAU;MACpCN,QAAQ,EAAEA,QAAS;MACnBa,OAAO,EAAEjB,YAAY,CAACS,OAAoB;IAAE;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAC/CnB,OAAA,CAACL,IAAI;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AACR,CAAC;AAAAb,EAAA,CAdYL,WAAuC;EAAA,QAGlBL,YAAY;AAAA;AAAAwB,EAAA,GAHjCnB,WAAuC;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}