{"ast":null,"code":"var _jsxFileName = \"/Users/Rober/dev/work/x_keeper/new_device_inspector/device_inspector_frontend/src/components/sectorBagde.tsx\",\n  _s = $RefreshSig$();\nimport { Spin, Typography } from 'antd';\nimport React from 'react';\nimport { useSectorGet } from '../hooks/useSectorGet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Text\n} = Typography;\nexport const SectorBadge = sector => {\n  _s();\n  const {\n    sectors,\n    sectorsStatus\n  } = useSectorGet();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      border: 'inherit',\n      borderColor: 'grey'\n    },\n    children: sectorsStatus == 'success' ? /*#__PURE__*/_jsxDEV(Text, {\n      code: true,\n      children: sectors.find(element => element.id == sector.sector_id).name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 10\n    }, this) : /*#__PURE__*/_jsxDEV(Spin, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 11\n  }, this);\n};\n_s(SectorBadge, \"N9OU6GSNYl1SV223kug/mK3e0K4=\", false, function () {\n  return [useSectorGet];\n});\n_c = SectorBadge;\nvar _c;\n$RefreshReg$(_c, \"SectorBadge\");","map":{"version":3,"names":["Spin","Typography","React","useSectorGet","jsxDEV","_jsxDEV","Text","SectorBadge","sector","_s","sectors","sectorsStatus","style","border","borderColor","children","code","find","element","id","sector_id","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/Rober/dev/work/x_keeper/new_device_inspector/device_inspector_frontend/src/components/sectorBagde.tsx"],"sourcesContent":["\nimport {Spin, Typography} from 'antd'\nimport React from 'react'\nimport {TSector} from '../types/sectorType'\nimport {useSectorGet} from '../hooks/useSectorGet'\n\nconst {Text} = Typography\ninterface SectorBadgeProps {\n  sector_id: number\n}\n\nexport const SectorBadge: React.FC<SectorBadgeProps> = sector => {\n  const {sectors, sectorsStatus} = useSectorGet()\n  return (<div style={{border: 'inherit', borderColor: 'grey'}}>\n    {sectorsStatus == 'success' \n      ?  <Text code>{(sectors as TSector[]).find(\n        (element: TSector) => element.id == sector.sector_id\n      )!.name}</Text>\n\n      : <Spin/>\n    }\n  </div>)\n}\n"],"mappings":";;AACA,SAAQA,IAAI,EAAEC,UAAU,QAAO,MAAM;AACrC,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAAQC,YAAY,QAAO,uBAAuB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAM;EAACC;AAAI,CAAC,GAAGL,UAAU;AAKzB,OAAO,MAAMM,WAAuC,GAAGC,MAAM,IAAI;EAAAC,EAAA;EAC/D,MAAM;IAACC,OAAO;IAAEC;EAAa,CAAC,GAAGR,YAAY,CAAC,CAAC;EAC/C,oBAAQE,OAAA;IAAKO,KAAK,EAAE;MAACC,MAAM,EAAE,SAAS;MAAEC,WAAW,EAAE;IAAM,CAAE;IAAAC,QAAA,EAC1DJ,aAAa,IAAI,SAAS,gBACtBN,OAAA,CAACC,IAAI;MAACU,IAAI;MAAAD,QAAA,EAAGL,OAAO,CAAeO,IAAI,CACvCC,OAAgB,IAAKA,OAAO,CAACC,EAAE,IAAIX,MAAM,CAACY,SAC7C,CAAC,CAAEC;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,gBAEbpB,OAAA,CAACL,IAAI;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAER,CAAC;AACR,CAAC;AAAAhB,EAAA,CAXYF,WAAuC;EAAA,QACjBJ,YAAY;AAAA;AAAAuB,EAAA,GADlCnB,WAAuC;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}