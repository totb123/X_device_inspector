"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TextBackgroundType = exports.Position = exports.ImageFormat = void 0;
var _reactNative = require("react-native");
const {
  resolveAssetSource
} = _reactNative.Image;
const LINKING_ERROR = `The package 'react-native-image-marker' doesn't seem to be linked. Make sure: \n\n` + _reactNative.Platform.select({
  ios: "- You have run 'pod install'\n",
  default: ''
}) + '- You rebuilt the app after installing the package\n' + '- You are not using Expo Go\n';

/**
 * @description Position enum for text watermark and image watermark
 * @enum
 */
let Position = exports.Position = /*#__PURE__*/function (Position) {
  Position["topLeft"] = "topLeft";
  Position["topCenter"] = "topCenter";
  Position["topRight"] = "topRight";
  Position["bottomLeft"] = "bottomLeft";
  Position["bottomCenter"] = "bottomCenter";
  Position["bottomRight"] = "bottomRight";
  Position["center"] = "center";
  return Position;
}({});
/**
 * @description TextBackgroundType enum for text watermark
 * @enum
 */
let TextBackgroundType = exports.TextBackgroundType = /*#__PURE__*/function (TextBackgroundType) {
  TextBackgroundType["stretchX"] = "stretchX";
  TextBackgroundType["stretchY"] = "stretchY";
  TextBackgroundType["none"] = "fit";
  return TextBackgroundType;
}({});
/**
 * @description ImageFormat enum for save image format
 * @enum
 */
let ImageFormat = exports.ImageFormat = /*#__PURE__*/function (ImageFormat) {
  ImageFormat["png"] = "png";
  ImageFormat["jpg"] = "jpg";
  ImageFormat["base64"] = "base64";
  return ImageFormat;
}({});
/**
 * @description Padding style for text background
 * @example
 * padding: 10
 * // or
 * padding: '10%'
 * // or
 * padding: '10% 20%'
 * // or
 * padding: '10% 20% 30%'
 * // or
 * paddingLeft: '10%'
 * // or
 * paddingVertical: '10%'
 */
/**
 * @description PositionOptions for text watermark and image watermark, if you set position you don't need to set X and Y
 * @example
 * positionOptions: {
 *  X: 10,
 *  Y: 10,
 * }
 * // or
 * positionOptions: {
 *  position: Position.topLeft,
 * }
 * // or
 * positionOptions: {
 *  X: '10%', // relative to the width of the background image
 *  Y: '10%', // relative to the width of the background image
 * }
 */
/**
 * @description TextStyle for text watermark
 * @example
 *  textStyle: {
 *    color: '#aacc22',
 *    fontName: 'Arial',
 *    fontSize: 12,
 *    shadowStyle: {
 *      dx: 10,
 *      dy: 10,
 *      radius: 10,
 *      color: '#aacc22'
 *    },
 *    textBackgroundStyle: {
 *      paddingX: 10,
 *      paddingY: 10,
 *      type: TextBackgroundType.stretchX,
 *      color: '#aacc22'
 *    },
 *    underline: true,
 *    skewX: 45,
 *    strikeThrough: true,
 *    textAlign: 'left',
 *    italic: true,
 *    bold: true,
 *    rotate: 45
 *  }
 */
/**
 * @description ShadowLayer style for text watermark
 * @example
 * shadowStyle: {
 *  dx: 10,
 *  dy: 10,
 *  radius: 10,
 *  color: '#aacc22'
 * }
 */
/**
 * @description background style for text watermark
 * > thanks [@onka13](https://github.com/onka13) for [#38](https://github.com/JimmyDaddy/react-native-image-marker/pull/38)
 * @example
 * textBackgroundStyle: {
 *  paddingX: 10,
 *  paddingY: 10,
 *  type: TextBackgroundType.stretchX,
 *  color: '#aacc22'
 * }
 * // or
 * textBackgroundStyle: {
 *  padding: '10% 50 15%',
 *  color: '#aacc22'
 * }
 * // or
 * textBackgroundStyle: {
 *  padding: 10,
 *  color: '#aacc22',
 *  cornerRadius: {
 *    topLeft: {
 *      x: '10%',
 *      y: 10,
 *    },
 *    topRight: {
 *      x: 10,
 *      y: 10,
 *    },
 *  }
 * }
 */
/**
 * @description Text options for text watermark
 * @example
 *  text: 'hello world',
 *  positionOptions: {
 *    X: 10,
 *    Y: 10,
 *    // or
 *    // position: Position.center
 *  },
 *  style: {
 *    color: '#aacc22',
 *    fontName: 'Arial',
 *    fontSize: 12,
 *    shadowStyle: {
 *      dx: 10,
 *      dy: 10,
 *      radius: 10,
 *      color: '#aacc22'
 *    },
 *    textBackgroundStyle: {
 *      paddingX: 10,
 *      paddingY: 10,
 *      type: TextBackgroundType.stretchX,
 *      color: '#aacc22'
 *    },
 *    underline: true,
 *    skewX: 45,
 *    strikeThrough: true,
 *    textAlign: 'left',
 *    italic: true,
 *    bold: true,
 *    rotate: 45
 *  }
 */
/**
 * @description Options for text watermark
 * @example
 *  backgroundImage: {
 *    src: require('./images/logo.png'),
 *    scale: 0.5,
 *    rotate: 45,
 *    alpha: 0.5
 *  },
 *  watermarkTexts: [
 *  {
 *    text: 'hello world',
 *    positionOptions: {
 *      X: 10,
 *      Y: 10,
 *      // or
 *      // position: Position.center
 *    },
 *    style: {
 *      color: '#aacc22',
 *      fontName: 'Arial',
 *      fontSize: 12,
 *      shadowStyle: {
 *        dx: 10,
 *        dy: 10,
 *        radius: 10,
 *        color: '#aacc22'
 *      },
 *      textBackgroundStyle: {
 *        paddingX: 10,
 *        paddingY: 10,
 *        type: TextBackgroundType.stretchX,
 *        color: '#aacc22'
 *      },
 *      underline: true,
 *      strikeThrough: true,
 *      textAlign: 'left',
 *      italic: true,
 *      //or
 *      // skewX: 45,
 *      bold: true,
 *      rotate: 45
 *    }
 *  }],
 *  quality: 1,
 *  filename: 'test',
 *  saveFormat: ImageFormat.jpg,
 */
/**
 * @description Image options for background image or watermark image
 * @example
 * {
 *  src: require('./images/logo.png'),
 *  scale: 0.5,
 *  rotate: 45,
 *  alpha: 0.5
 * }
 */
/**
 * @description Text options for image watermark
 * @example
 *  src: require('./images/logo.png'),
 *  scale: 0.5,
 *  rotate: 45,
 *  alpha: 0.5
 *  position: {
 *   X: 10,
 *   Y: 10,
 *   // or
 *   // position: Position.center
 * }
 **/
/**
 * @description Text options for image watermark
 * @example
 *
 *  backgroundImage: {
 *    src: require('./images/bg.png'),
 *    scale: 0.5,
 *    rotate: 45,
 *    alpha: 0.5
 *  },
 *  watermarkImages: [
 *    {
 *      src: require('./images/logo.png'),
 *      scale: 0.5,
 *      rotate: 45,
 *      alpha: 0.5,
 *      position: {
 *        X: 10,
 *        Y: 10,
 *      },
 *    },
 *    {
 *      src: require('./images/logo1.png'),
 *      scale: 0.5,
 *      rotate: 45,
 *      alpha: 0.5,
 *      position: {
 *        position: Position.center,
 *     },
 *    },
 *  ],
 *  quality: 1,
 *  filename: 'test',
 *  saveFormat: ImageFormat.jpg,
 *
 */
const ImageMarker = _reactNative.NativeModules.ImageMarker ? _reactNative.NativeModules.ImageMarker : new Proxy({}, {
  get() {
    throw new Error(LINKING_ERROR);
  }
});
class Marker {
  /** @ignore ignore constructors for typedoc only */
  constructor() {}
  /**
   * @description mark text on image
   * @param options
   * @returns {Promise<string>} image url or base64 string
   * @example
   * const options = {
   *  backgroundImage: {
   *   src: require('./images/test.jpg'),
   *   scale: 1,
   *   rotate: 20,
   *   alpha: 0.5,
   *  },
   *  watermarkTexts: [
   *  {
   *    text: 'hello',
   *    positionOptions: {
   *      position: Position.center,
   *    },
   *    style: {
   *      color: '#ff00ff',
   *      fontSize: 30,
   *      fontName: 'Arial',
   *      rotate: 30,
   *      shadowStyle: {
   *        dx: 10,
   *        dy: 10,
   *        radius: 10,
   *        color: '#ffaa22',
   *      },
   *      textBackgroundStyle: {
   *        paddingX: 10,
   *        paddingY: 10,
   *        type: TextBackgroundType.none,
   *        color: '#faaaff',
   *      },
   *      underline: true,
   *      strikeThrough: true,
   *      textAlign: 'left',
   *      italic: true,
   *      bold: true,
   *    },
   *  },
   *  {
   *    text: 'world',
   *    positionOptions: {
   *      X: 10,
   *      Y: 10,
   *    },
   *    style: {
   *     color: '#AAFFDD',
   *     fontSize: 30,
   *     fontName: 'Arial',
   *     rotate: 170,
   *     shadowStyle: {
   *      dx: 10,
   *      dy: 10,
   *      radius: 10,
   *      color: '#ffaa22',
   *     },
   *     textBackgroundStyle: {
   *      paddingX: 10,
   *      paddingY: 10,
   *      type: TextBackgroundType.stretchX,
   *      color: '#faaaff',
   *     },
   *     textAlign: 'right',
   *     skewX: 10,
   *  ],
   *  scale: 1,
   *  quality: 100,
   *  filename: 'test',
   *  saveFormat: ImageFormat.png,
   * };
   * ImageMarker.markText(options).then((res) => {
   *  console.log(res);
   * }).catch((err) => {
   *  console.log(err);
   * });
   * // or
   * await ImageMarker.markText(options);
   */
  static markText(options) {
    const {
      backgroundImage
    } = options;
    if (!backgroundImage || !backgroundImage.src) {
      throw new Error('please set image!');
    }
    let srcObj = resolveAssetSource(backgroundImage.src);
    if (!srcObj) {
      srcObj = {
        uri: backgroundImage.src,
        __packager_asset: false
      };
    }
    options.watermarkTexts.forEach(item => {
      item.position = item.position || item.positionOptions;
      delete item.positionOptions;
    });
    options.backgroundImage.src = srcObj;
    // let mShadowStyle = shadowStyle || {};
    // let mTextBackgroundStyle = textBackgroundStyle || {};
    options.maxSize = options.maxSize || 2048;
    return ImageMarker.markWithText(options);
  }

  /**
   * @description mark image on background image
   * @param options
   * @returns {Promise<string>} image url or base64 string
   * @example
   * const options = {
   *  backgroundImage: {
   *    src: require('./images/test.jpg'),
   *    scale: 1,
   *    rotate: 20,
   *    alpha: 0.5,
   *  },
   *  quality: 100,
   *  filename: 'test',
   *  saveFormat: ImageFormat.png,
   *  watermarkImages: [
   *    {
   *      src: require('./images/logo.png'),
   *      scale: 0.5,
   *      rotate: 45,
   *      alpha: 0.5,
   *      position: {
   *        X: 10,
   *        Y: 10,
   *      },
   *    },
   *    {
   *      src: require('./images/logo1.png'),
   *      scale: 0.5,
   *      rotate: 45,
   *      alpha: 0.5,
   *      position: {
   *        position: Position.center,
   *     },
   *    },
   *  ],
   * };
   * ImageMarker.markImage(options).then((res) => {
   *  console.log(res);
   * }).catch((err) => {
   *  console.log(err);
   * });
   * // or
   * await ImageMarker.markImage(options);
   */
  static markImage(options) {
    const {
      backgroundImage,
      watermarkImage = {},
      watermarkImages = []
    } = options;
    if (!backgroundImage || !backgroundImage.src) {
      throw new Error('please set image!');
    }
    if ((!watermarkImage || !watermarkImage.src) && watermarkImages.some(item => !item.src)) {
      throw new Error('please set mark image!');
    }
    let srcObj = resolveAssetSource(backgroundImage.src);
    if (!srcObj) {
      srcObj = {
        uri: backgroundImage.src,
        __packager_asset: false
      };
    }
    if (watermarkImage && options.watermarkImage) {
      let markerObj = resolveAssetSource(watermarkImage.src);
      if (!markerObj) {
        markerObj = {
          uri: watermarkImage.src,
          __packager_asset: false
        };
      }
      options.watermarkImage.src = markerObj;
    }
    if (watermarkImages.length > 0) {
      for (const myWi of watermarkImages) {
        let markerObj = resolveAssetSource(myWi.src);
        if (!markerObj) {
          markerObj = {
            uri: myWi.src,
            __packager_asset: false
          };
        }
        myWi.src = markerObj;
      }
    } else {
      options.watermarkImages = [];
    }
    options.backgroundImage.src = srcObj;
    options.maxSize = options.maxSize || 2048;
    return ImageMarker.markWithImage(options);
  }
}
var _default = exports.default = Marker;
//# sourceMappingURL=index.js.map